viridis,      # Colorblind-friendly color palettes
RColorBrewer, # Additional color palettes for plots
gridExtra,    # Arrange multiple grid-based plots on a page
ggfortify,    # Unified plotting interface for stats objects
grid,         # Low-level graphics system
# String Manipulation
stringr,      # Simple and consistent string manipulation functions
stringi,      # Advanced string manipulation with Unicode support
# Date-Time Handling
lubridate,    # Simplify date and time parsing and manipulation
# Geographic and Spatial Data
geobr,        # Access Brazilian geographic data (e.g., shapefiles)
deflateBR,    # Deflate nominal Brazilian Reais using price indexes
sf,           # Handle spatial/geographic data in R
# Reporting and Tables
gt,           # Create publication-quality tables
stargazer,    # Generate regression tables in LaTeX/HTML/text formats
# Machine Learning and Statistics
caret,        # Comprehensive machine learning framework
Metrics,      # Evaluate model performance (RMSE, MAE, etc.)
glmnet,       # Regularized generalized linear models (Lasso, Ridge)
earth,        # Multivariate Adaptive Regression Splines
vip,          # Variable Importance Plots
pdp,          # Partial Dependence Plots
car,          # Companion to Applied Regression (diagnostic functions)
DescTools,    # Tools for descriptive statistics
rsample,      # Functions for resampling data
# Time Series Analysis
plm,          # Panel data analysis (fixed/random effects models)
forecast,     # Time series forecasting functions and models
astsa,        # Applied statistical time series analysis
xts,          # Extensible time series class and methods
seasonal,     # Seasonal adjustment of time series
urca,         # Unit root and cointegration tests
fable,        # Modern time series modeling framework
tsibble,      # Tidy temporal data structures
prophet,      # Forecasting procedure for time series
vars,
conflicted,
ffp3
)
pacman::p_load(
# Core Data Manipulation and Tidying
dplyr,        # Data manipulation: filter, summarize, mutate, and more
tidyr,        # Data tidying: pivot, handle missing values, reshape
janitor,      # Clean messy data and create summary tables
forcats,      # Handle categorical variables (factors)
# Data Import and Export
readr,        # Read flat files (CSV, TSV) into tibbles
readxl,       # Read Excel files (.xls, .xlsx) into data frames
basedosdados, # Access Brazilian public data via BigQuery
httr,         # Perform HTTP requests for web API interactions
archive,      # Extract files from compressed archives (.zip, .tar.gz)
# Data Visualization
ggplot2,      # Create customizable visualizations with grammar of graphics
scales,       # Format axes and legends (percentages, currencies)
viridis,      # Colorblind-friendly color palettes
RColorBrewer, # Additional color palettes for plots
gridExtra,    # Arrange multiple grid-based plots on a page
ggfortify,    # Unified plotting interface for stats objects
grid,         # Low-level graphics system
# String Manipulation
stringr,      # Simple and consistent string manipulation functions
stringi,      # Advanced string manipulation with Unicode support
# Date-Time Handling
lubridate,    # Simplify date and time parsing and manipulation
# Geographic and Spatial Data
geobr,        # Access Brazilian geographic data (e.g., shapefiles)
deflateBR,    # Deflate nominal Brazilian Reais using price indexes
sf,           # Handle spatial/geographic data in R
# Reporting and Tables
gt,           # Create publication-quality tables
stargazer,    # Generate regression tables in LaTeX/HTML/text formats
# Machine Learning and Statistics
caret,        # Comprehensive machine learning framework
Metrics,      # Evaluate model performance (RMSE, MAE, etc.)
glmnet,       # Regularized generalized linear models (Lasso, Ridge)
earth,        # Multivariate Adaptive Regression Splines
vip,          # Variable Importance Plots
pdp,          # Partial Dependence Plots
car,          # Companion to Applied Regression (diagnostic functions)
DescTools,    # Tools for descriptive statistics
rsample,      # Functions for resampling data
# Time Series Analysis
plm,          # Panel data analysis (fixed/random effects models)
forecast,     # Time series forecasting functions and models
astsa,        # Applied statistical time series analysis
xts,          # Extensible time series class and methods
seasonal,     # Seasonal adjustment of time series
urca,         # Unit root and cointegration tests
fable,        # Modern time series modeling framework
tsibble,      # Tidy temporal data structures
prophet,      # Forecasting procedure for time series
vars,
conflicted,
fpp3
)
fit_Prophet |> gg_tsresiduals()
fit_Prophet %>%
components() %>%
autoplot()
fit_Prophet %>%
fpp3::components() %>%
autoplot()
fit_Prophet %>%
gg_tsresiduals()
?gg_tsresiduals()
fit_ETS %>%
gg_tsresiduals()
fit_ETS %>%
gg_tsresiduals()
fcast_ETS %>%
gg_tsresiduals()
pacman::p_load(
# Core Data Manipulation and Tidying
dplyr,        # Data manipulation: filter, summarize, mutate, and more
tidyr,        # Data tidying: pivot, handle missing values, reshape
janitor,      # Clean messy data and create summary tables
forcats,      # Handle categorical variables (factors)
# Data Import and Export
readr,        # Read flat files (CSV, TSV) into tibbles
readxl,       # Read Excel files (.xls, .xlsx) into data frames
basedosdados, # Access Brazilian public data via BigQuery
httr,         # Perform HTTP requests for web API interactions
archive,      # Extract files from compressed archives (.zip, .tar.gz)
# Data Visualization
ggplot2,      # Create customizable visualizations with grammar of graphics
scales,       # Format axes and legends (percentages, currencies)
viridis,      # Colorblind-friendly color palettes
RColorBrewer, # Additional color palettes for plots
gridExtra,    # Arrange multiple grid-based plots on a page
ggfortify,    # Unified plotting interface for stats objects
grid,         # Low-level graphics system
# String Manipulation
stringr,      # Simple and consistent string manipulation functions
stringi,      # Advanced string manipulation with Unicode support
# Date-Time Handling
lubridate,    # Simplify date and time parsing and manipulation
# Geographic and Spatial Data
geobr,        # Access Brazilian geographic data (e.g., shapefiles)
deflateBR,    # Deflate nominal Brazilian Reais using price indexes
sf,           # Handle spatial/geographic data in R
# Reporting and Tables
gt,           # Create publication-quality tables
stargazer,    # Generate regression tables in LaTeX/HTML/text formats
# Machine Learning and Statistics
caret,        # Comprehensive machine learning framework
Metrics,      # Evaluate model performance (RMSE, MAE, etc.)
glmnet,       # Regularized generalized linear models (Lasso, Ridge)
earth,        # Multivariate Adaptive Regression Splines
vip,          # Variable Importance Plots
pdp,          # Partial Dependence Plots
car,          # Companion to Applied Regression (diagnostic functions)
DescTools,    # Tools for descriptive statistics
rsample,      # Functions for resampling data
# Time Series Analysis
plm,          # Panel data analysis (fixed/random effects models)
forecast,     # Time series forecasting functions and models
astsa,        # Applied statistical time series analysis
xts,          # Extensible time series class and methods
seasonal,     # Seasonal adjustment of time series
urca,         # Unit root and cointegration tests
fable,        # Modern time series modeling framework
tsibble,      # Tidy temporal data structures
prophet,      # Forecasting procedure for time series
vars,
conflicted,
fable.prophet
)
fit_Prophet %>%
gg_tsresiduals()
fit_Prophet$stan.fit
pacman::p_load(
# Core Data Manipulation and Tidying
dplyr,        # Data manipulation: filter, summarize, mutate, and more
tidyr,        # Data tidying: pivot, handle missing values, reshape
janitor,      # Clean messy data and create summary tables
forcats,      # Handle categorical variables (factors)
# Data Import and Export
readr,        # Read flat files (CSV, TSV) into tibbles
readxl,       # Read Excel files (.xls, .xlsx) into data frames
basedosdados, # Access Brazilian public data via BigQuery
httr,         # Perform HTTP requests for web API interactions
archive,      # Extract files from compressed archives (.zip, .tar.gz)
# Data Visualization
ggplot2,      # Create customizable visualizations with grammar of graphics
scales,       # Format axes and legends (percentages, currencies)
viridis,      # Colorblind-friendly color palettes
RColorBrewer, # Additional color palettes for plots
gridExtra,    # Arrange multiple grid-based plots on a page
ggfortify,    # Unified plotting interface for stats objects
grid,         # Low-level graphics system
# String Manipulation
stringr,      # Simple and consistent string manipulation functions
stringi,      # Advanced string manipulation with Unicode support
# Date-Time Handling
lubridate,    # Simplify date and time parsing and manipulation
# Geographic and Spatial Data
geobr,        # Access Brazilian geographic data (e.g., shapefiles)
deflateBR,    # Deflate nominal Brazilian Reais using price indexes
sf,           # Handle spatial/geographic data in R
# Reporting and Tables
gt,           # Create publication-quality tables
stargazer,    # Generate regression tables in LaTeX/HTML/text formats
# Machine Learning and Statistics
caret,        # Comprehensive machine learning framework
Metrics,      # Evaluate model performance (RMSE, MAE, etc.)
glmnet,       # Regularized generalized linear models (Lasso, Ridge)
earth,        # Multivariate Adaptive Regression Splines
vip,          # Variable Importance Plots
pdp,          # Partial Dependence Plots
car,          # Companion to Applied Regression (diagnostic functions)
DescTools,    # Tools for descriptive statistics
rsample,      # Functions for resampling data
# Time Series Analysis
plm,          # Panel data analysis (fixed/random effects models)
forecast,     # Time series forecasting functions and models
astsa,        # Applied statistical time series analysis
xts,          # Extensible time series class and methods
seasonal,     # Seasonal adjustment of time series
urca,         # Unit root and cointegration tests
fable,        # Modern time series modeling framework
tsibble,      # Tidy temporal data structures
prophet,      # Forecasting procedure for time series
vars,
conflicted,
fable.prophet,
fable
tsibbledata
pacman::p_load(
# Core Data Manipulation and Tidying
dplyr,        # Data manipulation: filter, summarize, mutate, and more
tidyr,        # Data tidying: pivot, handle missing values, reshape
janitor,      # Clean messy data and create summary tables
forcats,      # Handle categorical variables (factors)
# Data Import and Export
readr,        # Read flat files (CSV, TSV) into tibbles
readxl,       # Read Excel files (.xls, .xlsx) into data frames
basedosdados, # Access Brazilian public data via BigQuery
httr,         # Perform HTTP requests for web API interactions
archive,      # Extract files from compressed archives (.zip, .tar.gz)
# Data Visualization
ggplot2,      # Create customizable visualizations with grammar of graphics
scales,       # Format axes and legends (percentages, currencies)
viridis,      # Colorblind-friendly color palettes
RColorBrewer, # Additional color palettes for plots
gridExtra,    # Arrange multiple grid-based plots on a page
ggfortify,    # Unified plotting interface for stats objects
grid,         # Low-level graphics system
# String Manipulation
stringr,      # Simple and consistent string manipulation functions
stringi,      # Advanced string manipulation with Unicode support
# Date-Time Handling
lubridate,    # Simplify date and time parsing and manipulation
# Geographic and Spatial Data
geobr,        # Access Brazilian geographic data (e.g., shapefiles)
deflateBR,    # Deflate nominal Brazilian Reais using price indexes
sf,           # Handle spatial/geographic data in R
# Reporting and Tables
gt,           # Create publication-quality tables
stargazer,    # Generate regression tables in LaTeX/HTML/text formats
# Machine Learning and Statistics
caret,        # Comprehensive machine learning framework
Metrics,      # Evaluate model performance (RMSE, MAE, etc.)
glmnet,       # Regularized generalized linear models (Lasso, Ridge)
earth,        # Multivariate Adaptive Regression Splines
vip,          # Variable Importance Plots
pdp,          # Partial Dependence Plots
car,          # Companion to Applied Regression (diagnostic functions)
DescTools,    # Tools for descriptive statistics
rsample,      # Functions for resampling data
# Time Series Analysis
plm,          # Panel data analysis (fixed/random effects models)
forecast,     # Time series forecasting functions and models
astsa,        # Applied statistical time series analysis
xts,          # Extensible time series class and methods
seasonal,     # Seasonal adjustment of time series
urca,         # Unit root and cointegration tests
fable,        # Modern time series modeling framework
tsibble,      # Tidy temporal data structures
prophet,      # Forecasting procedure for time series
vars,
conflicted,
fable.prophet,
fable,
tsibbledata
)
univariate_ts
univariate_ts %>%
model(ETS()) %>%
gg_tsresiduals()
fit_Prophet %>%
residuals() %>% ggtsdisplay()
fit_ARIMA %>% ggtsdisplay()
fit_ARIMA %>% ggtsdisplay()
fit_ARIMA %>%
residuals() %>% ggtsdisplay()
diagnostics_EST <- fit_ETS %>%
residuals() %>% ggtsdisplay()
?residuals()
View(fcast_Prophet)
univariate_ts
multivariate_ts
multivariate_ts %>%
multivariate_ts %>%
model(
prophet(BEV ~ Diesel + Ethanol + Gasoline + PHEV + Population +
season(period = "year", oder = 1)))
multivariate_ts
multivariate_ts %>%
model(
prophet(BEV ~ Diesel + Ethanol + Gasoline + PHEV + Population +
season(period = "year", oder = 1)))
as.Data.Frame(multivariate_ts) %>%
model(
prophet(BEV ~ Diesel + Ethanol + Gasoline + PHEV + Population +
season(period = "year", oder = 1)))
data.frame(multivariate_ts) %>%
model(
prophet(BEV ~ Diesel + Ethanol + Gasoline + PHEV + Population +
season(period = "year", oder = 1)))
data.frame(multivariate_ts) %>%
model(
prophet_model = prophet(BEV ~ Diesel + Ethanol + Gasoline + PHEV + Population +
season(period = "year", order = 1))
)
multivariate_ts
multivariate_ts %>%
as_tsibble() %>%  # Specify your time index column
model(
prophet_model = prophet(BEV ~ Diesel + Ethanol + Gasoline + PHEV + Population +
season(period = "year", order = 1))
)
multivariate_ts %>%
as_tsibble() %>%  # Specify your time index column
model(
prophet_model = fable.prophet::prophet(BEV ~ Diesel + Ethanol + Gasoline + PHEV + Population +
season(period = "year", order = 1))
)
multivariate_ts
multivariate_ts %>%
as_tsibble()
multivariate_ts %>%  # Specify your time index column
model(
prophet_model = fable.prophet::prophet(BEV ~ Diesel + Ethanol + Gasoline + PHEV + Population +
season(period = "year", order = 1))
)
df_fleet_brazil_pop %>%  # Specify your time index column
model(
prophet_model = fable.prophet::prophet(BEV ~ Diesel + Ethanol + Gasoline + PHEV + Population +
season(period = "year", order = 1))
)
prophet::fit.prophet(fit_Prophet)
?fit.prophet
forecast_metric_data  <- fit_Prophet %>%
as_tibble() %>%
mutate(ds = as.Date(ds)) %>%
filter(ds>=ymd("2014-01-31"))
forecast_metric_data  <- fit_Prophet %>%
as_tibble() %>%
mutate(ds = as.Date(ds)) %>%
filter(ds>=ymd("2020-01-01"))
time_df_Prophet
Prophet_RMSE = sqrt(mean((time_df_Prophet$data - time_df_Prophet$yhat)^2))
Prophet_MAPE <- mean(abs((time_df_Prophet$data - time_df_Prophet$yhat)/time_df_Prophet$data))
Prophet_MAE  <- mean(abs(time_df_Prophet$data - time_df_Prophet$yhat))
diagnostics_TS <- fit_TS %>%
residuals() %>% ggtsdisplay()
?ggtdisplay()
?ggtsdisplay()
diagnostics_TS <- fit_TS %>%
residuals() %>% ggtsdisplay(plot.type ="histogram")
diagnostics_TS <- fit_TS %>%
residuals() %>% ggtsdisplay(plot.type ="scatter")
diagnostics_TS <- fit_TS %>%
residuals() %>% ggtsdisplay(plot.type ="spectrum")
diagnostics_TS <- fit_TS %>%
residuals() %>% ggtsdisplay(plot.type ="partial")
diagnostics_TS <- fit_TS %>%
residuals() %>% ggtsdisplay()
diagnostics_TS <- fit_TS %>%
residuals() %>% ggtsdisplay() +
theme_bw
diagnostics_TS <- fit_TS %>%
residuals() %>% ggtsdisplay() +
theme_bw()
diagnostics_TS <- fit_TS %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
fit_ARIMA %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
diagnostics_EST <- fit_ETS %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
diagnostics_EST
diagnostics_EST <- fit_ETS %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
# Diagnostic plots
diagnostics_VA_selected <- fcast_VA_selected_BEV %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
View(diagnostics_EST)
diagnostics_ETS <- fit_ETS %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
diagnostics_TS %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
fit_TS %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
fit_ETS %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
fit_ARIMA %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
ffcast_VA_selected_BEV %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
fit_VA_selected_BEV %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
fit_VA %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
fcast_VA_selected_BEV %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
fcast_VA_selected_BEV %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
fit_ARIMA %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
fit_ETS %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
fit_TS %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
?plm()
# 1. Packages ------------------------------------------------------------------
source("./2_code/00_packages.R")
# 2. Loading data from the pipeline --------------------------------------------
source("./2_code/Pipeline/07_combined_data.R")
# 3. Linear Regressions (Fixed Effects) ----------------------------------------
# Function to log-transform null values and return small constant
safe_log <- function(x) {
ifelse(x > 0,
log(x),
ifelse(x == 0,
log(0.01),  # Small constant for zeros
-log(abs(x) + 1)))  # For negative values
}
# Transforming variables in the dataframe
df_combined_state_transformed <- df_combined_state %>%
mutate(across(c(electric, population, PHEV, gasoline, ethanol,
min_ev, mean_gas, mean_hyb,
avg_taxable_income_50, avg_taxable_income_100),
~ safe_log(.x),
.names = "log_{.col}"))
# Running fixed-effects models
fe_model_1 <- plm(log_electric ~
log_population,
data = df_combined_state_transformed,
model = "within",
index = c("sigla_uf", "date"))
fe_model_2 <- plm(log_electric ~
log_population +
log_PHEV + log_gasoline + log_ethanol,
data = df_combined_state_transformed,
model = "within",
index = c("sigla_uf", "date"))
fe_model_3 <- plm(log_electric ~
log_population +
log_PHEV + log_gasoline + log_ethanol +
log_min_ev + log_mean_gas + log_mean_hyb,
data = df_combined_state_transformed,
model = "within",
index = c("sigla_uf", "date"))
fe_model_4 <- plm(log_electric ~
log_population +
log_PHEV + log_gasoline + log_ethanol +
log_min_ev + log_mean_gas + log_mean_hyb +
log_avg_taxable_income_50 + log_avg_taxable_income_100,
data = df_combined_state_transformed,
model = "within",
index = c("sigla_uf", "date"))
stargazer(fe_model_1, fe_model_2, fe_model_3, fe_model_4, type = "html",
title = "BEV stock regressed on population size, time, vehicle prices and income with panel data and fixed effects",
single.row = FALSE,
dep.var.labels = c("BEV stock (log)"),
column.labels = c("Model 1", "Model 2", "Model 3", "Model 4"),
keep.stat = c("rsq", "f"),
notes.align = "l",
omit = "as.factor\\(months_nr\\)[0-9]+",
intercept.bottom = TRUE,
covariate.labels=c("Population",
"PHEV Stock",
"ICE Stock - Gasoline",
"ICE Stock - Ethanol",
"Vehicle price - BEV",
"Vehicle price - ICE (log)",
"Vehicle price - ICE (log)",
"Avg. Income - 50th perc. (log)",
"Avg. Income - 100th perc. (log)",
out = "./5_analysis/1_regression_tables/fe_model.html"))
fe_model_4
stargazer(fe_model_1, fe_model_2, fe_model_3, fe_model_4, type = "html",
title = "BEV stock regressed on population size, time, vehicle prices and income with panel data and fixed effects",
single.row = FALSE,
dep.var.labels = c("BEV stock (log)"),
column.labels = c("Model 1", "Model 2", "Model 3", "Model 4"),
keep.stat = c("rsq", "f"),
notes.align = "l",
omit = "as.factor\\(months_nr\\)[0-9]+",
intercept.bottom = TRUE,
covariate.labels=c("Population",
"PHEV Stock",
"ICE Stock - Gasoline",
"ICE Stock - Ethanol",
"Vehicle price - BEV",
"Vehicle price - ICE (log)",
"Vehicle price - ICE (log)",
"Avg. Income - 50th perc. (log)",
"Avg. Income - 100th perc. (log)",
out = "./5_analysis/1_regression_tables/fe_model.html"))
