scale_y_continuous(
trans = "log10",
breaks = scales::trans_breaks("log10", function(x) 10^x), # Powers of 10
labels = scales::comma # Readable labels with commas
) +
theme(
panel.grid.major.y = element_line(color = "gray", linetype = "dashed"), # Dashed grid lines for y-axis
panel.grid.minor.y = element_blank() # Remove minor grid lines for clarity
) +
labs(
x = "Year",
y = "Number of Registered Vehicles",
title = "Evolution of Registered Vehicles in Brazil per Combustible Type",
subtitle = "Source: National Traffic Secretariat, 2024",
color = "Category"
)+
scale_color_manual(
values = c(
"Electric" = "orange3",   # Teal
"Hybrid" = "turquoise3",     # Orange
"Gasoline" = "red4",   # Purple
"Diesel" = "#e7298a",     # Pink
"Other" = "red4"       # Green
)
)
plot_trend_compared_cat
plot_trend_compared_cat <- ggplot(yearly_results_agg_long, aes(x = as.integer(year), y = Count, color = Category)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
theme_bw() +
scale_x_continuous(breaks = seq(2013, 2024, by = 1)) +
scale_y_continuous(
trans = "log10",
breaks = scales::trans_breaks("log10", function(x) 10^x), # Powers of 10
labels = scales::comma # Readable labels with commas
) +
theme(
panel.grid.major.y = element_line(color = "gray", linetype = "dashed"), # Dashed grid lines for y-axis
panel.grid.minor.y = element_blank() # Remove minor grid lines for clarity
) +
labs(
x = "Year",
y = "Number of Registered Vehicles",
title = "Evolution of Registered Vehicles in Brazil per Combustible Type",
subtitle = "Source: National Traffic Secretariat, 2024",
color = "Category"
)+
scale_color_manual(
values = c(
"Electric" = "orange3",   # Teal
"Hybrid" = "turquoise3",     # Orange
"Gasoline" = "red4",   # Purple
"Diesel" = "#e7298a",     # Pink
"Other" = "red4"       # Green
)
)
plot_trend_compared_cat
ggsave("./4_plots/plot_trend_compared_cat.png",
plot   = plot_trend_compared_cat)
ggsave("./4_plots/plot_trend_compared_cat.png",
plot   = plot_trend_compared_cat,
height = 4,
width  = 8)
plot_trend_yearly_avg_prices_deflated <-
ggplot(fipe_price_trends_deflated, aes(x = anoReferencia)) +
geom_line(aes(y = avg_price_electric, color = "Electric"), size = 1) +
geom_line(aes(y = avg_price_hybrid,   color = "Hybrid"), size = 1) +
geom_line(aes(y = avg_price_gasoline, color = "Gasoline"), size = 1) +
scale_color_manual(
name = "Fuel Type",
values = c("Electric" = "orange3", "Hybrid" = "turquoise3", "Gasoline" = "red4")
) +
scale_y_log10(
breaks = c(10000, 20000, 50000, 100000, 200000, 500000), # Logarithmic progression
labels = function(x) paste0("R$", format(x / 1000, big.mark = ".", decimal.mark = ","), " mil"),
limits = c(10000, 600000)
) +
scale_x_continuous(
breaks = 2013:2022, # Ensure all years from 2013 to 2022 are shown
labels = as.character(2013:2022) # Convert to character for cleaner labels
) +
labs(
x = "Year",
y = "Average Price (Deflated BRL)",
title = "Evolution of Average Vehicle Prices by Fuel Type (2013–2022)",
subtitle = "Source: Peixoto, 2022",
caption = "\nData scrapped from the Fundação Instituto de Pesquisas Econômicas (FIPE)\ntable for average prices observed nationally in Brazil."
) +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1),
plot.background = element_rect(fill = "#ffffff", color = NA)
)
ggsave("./4_plots/plot_trend_yearly_avg_prices_deflated.png",
plot = plot_trend_yearly_avg_prices_deflated)
ggplot(fipe_price_trends_deflated, aes(x = anoReferencia)) +
geom_line(aes(y = avg_price_electric, color = "Electric"), size = 1) +
geom_line(aes(y = avg_price_hybrid,   color = "Hybrid"), size = 1) +
geom_line(aes(y = avg_price_gasoline, color = "Gasoline"), size = 1) +
scale_color_manual(
name = "Fuel Type",
values = c("Electric" = "orange3", "Hybrid" = "turquoise3", "Gasoline" = "red4")
) +
scale_y_log10(
breaks = c(10000, 20000, 50000, 100000, 200000, 500000), # Logarithmic progression
labels = function(x) paste0("R$", format(x / 1000, big.mark = ".", decimal.mark = ","), " mil"),
limits = c(10000, 600000)
) +
scale_x_continuous(
breaks = 2013:2022,
labels = as.character(2013:2022)
) +
labs(
x = "Year",
y = "Average Price (Deflated BRL)",
title = "Evolution of Average Vehicle Prices by Fuel Type (2013–2022)",
subtitle = "Source: Peixoto, 2022",
caption = "\nData scrapped from the Fundação Instituto de Pesquisas Econômicas (FIPE)\ntable for average prices observed nationally in Brazil."
) +
theme_minimal() + # Changed to theme_minimal for consistency
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.y = element_line(color = "gray", linetype = "dashed"), # Dashed grid lines for y-axis
panel.grid.minor.y = element_blank(), # Remove minor grid lines for clarity
plot.background = element_rect(fill = "#ffffff", color = NA),
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 8)
)
ggplot(fipe_price_trends_deflated, aes(x = anoReferencia)) +
geom_line(aes(y = avg_price_electric, color = "Electric"), size = 1) +
geom_line(aes(y = avg_price_hybrid,   color = "Hybrid"), size = 1) +
geom_line(aes(y = avg_price_gasoline, color = "Gasoline"), size = 1) +
scale_color_manual(
name = "Fuel Type",
values = c("Electric" = "orange3", "Hybrid" = "turquoise3", "Gasoline" = "red4")
) +
scale_y_log10(
breaks = c(10000, 20000, 50000, 100000, 200000, 500000), # Logarithmic progression
labels = function(x) paste0("R$", format(x / 1000, big.mark = ".", decimal.mark = ","), " mil"),
limits = c(10000, 600000)
) +
scale_x_continuous(
breaks = 2013:2022,
labels = as.character(2013:2022)
) +
labs(
x = "Year",
y = "Average Price (Deflated BRL)",
title = "Evolution of Average Vehicle Prices by Fuel Type (2013–2022)",
subtitle = "Source: Peixoto, 2022",
caption = "\nData scrapped from the Fundação Instituto de Pesquisas Econômicas (FIPE)\ntable for average prices observed nationally in Brazil."
) +
theme_minimal() + # Changed to theme_minimal for consistency
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.y = element_line(color = "gray", linetype = "dashed"), # Dashed grid lines for y-axis
panel.grid.minor.y = element_blank(), # Remove minor grid lines for clarity
plot.background = element_rect(fill = "#ffffff", color = NA),
)
ggplot(fipe_price_trends_deflated, aes(x = anoReferencia)) +
geom_line(aes(y = avg_price_electric, color = "Electric"), size = 1) +
geom_line(aes(y = avg_price_hybrid,   color = "Hybrid"), size = 1) +
geom_line(aes(y = avg_price_gasoline, color = "Gasoline"), size = 1) +
scale_color_manual(
name = "Fuel Type",
values = c("Electric" = "orange3", "Hybrid" = "turquoise3", "Gasoline" = "red4")
) +
scale_y_log10(
breaks = c(10000, 20000, 50000, 100000, 200000, 500000), # Logarithmic progression
labels = function(x) paste0("R$", format(x / 1000, big.mark = ".", decimal.mark = ","), " mil"),
limits = c(10000, 600000)
) +
scale_x_continuous(
breaks = 2013:2022,
labels = as.character(2013:2022)
) +
labs(
x = "Year",
y = "Average Price (Deflated BRL)",
title = "Evolution of Average Vehicle Prices by Fuel Type (2013–2022)",
subtitle = "Source: Peixoto, 2022",
caption = "\nData scrapped from the Fundação Instituto de Pesquisas Econômicas (FIPE)\ntable for average prices observed nationally in Brazil."
) +
theme_minimal() + # Changed to theme_minimal for consistency
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.y = element_line(color = "gray", linetype = "dashed"), # Dashed grid lines for y-axis
plot.background = element_rect(fill = "#ffffff", color = NA),
)
ggsave("./4_plots/plot_trend_yearly_avg_prices_deflated.png",
plot = plot_trend_yearly_avg_prices_deflated)
ggplot(fipe_price_trends_deflated, aes(x = anoReferencia)) +
geom_line(aes(y = avg_price_electric, color = "Electric"), size = 1) +
geom_line(aes(y = avg_price_hybrid,   color = "Hybrid"), size = 1) +
geom_line(aes(y = avg_price_gasoline, color = "Gasoline"), size = 1) +
scale_color_manual(
name = "Fuel Type",
values = c("Electric" = "orange3", "Hybrid" = "turquoise3", "Gasoline" = "red4")
) +
scale_y_log10(
breaks = c(10000, 20000, 50000, 100000, 200000, 500000), # Logarithmic progression
labels = function(x) paste0("R$", format(x / 1000, big.mark = ".", decimal.mark = ","), " mil"),
limits = c(10000, 600000)
) +
scale_x_continuous(
breaks = 2013:2022,
labels = as.character(2013:2022)
) +
labs(
x = "Year",
y = "Average Price (Deflated BRL)",
title = "Evolution of Average Vehicle Prices by Fuel Type (2013–2022)",
subtitle = "Source: Peixoto, 2022",
caption = "\nData scrapped from the Fundação Instituto de Pesquisas Econômicas (FIPE)\ntable for average prices observed nationally in Brazil."
) +
theme_minimal() + # Changed to theme_minimal for consistency
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.y = element_line(color = "gray", linetype = "dashed"), # Dashed grid lines for y-axis
plot.background = element_rect(fill = "#ffffff", color = NA),
)
plot_trend_yearly_avg_prices_deflated <- ggplot(fipe_price_trends_deflated, aes(x = anoReferencia)) +
geom_line(aes(y = avg_price_electric, color = "Electric"), size = 1) +
geom_line(aes(y = avg_price_hybrid,   color = "Hybrid"), size = 1) +
geom_line(aes(y = avg_price_gasoline, color = "Gasoline"), size = 1) +
scale_color_manual(
name = "Fuel Type",
values = c("Electric" = "orange3", "Hybrid" = "turquoise3", "Gasoline" = "red4")
) +
scale_y_log10(
breaks = c(10000, 20000, 50000, 100000, 200000, 500000), # Logarithmic progression
labels = function(x) paste0("R$", format(x / 1000, big.mark = ".", decimal.mark = ","), " mil"),
limits = c(10000, 600000)
) +
scale_x_continuous(
breaks = 2013:2022,
labels = as.character(2013:2022)
) +
labs(
x = "Year",
y = "Average Price (Deflated BRL)",
title = "Evolution of Average Vehicle Prices by Fuel Type (2013–2022)",
subtitle = "Source: Peixoto, 2022",
caption = "\nData scrapped from the Fundação Instituto de Pesquisas Econômicas (FIPE)\ntable for average prices observed nationally in Brazil."
) +
theme_minimal() + # Changed to theme_minimal for consistency
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.y = element_line(color = "gray", linetype = "dashed"), # Dashed grid lines for y-axis
plot.background = element_rect(fill = "#ffffff", color = NA),
)
ggsave("./4_plots/plot_trend_yearly_avg_prices_deflated.png",
plot = plot_trend_yearly_avg_prices_deflated)
source("C:/Users/joaov/Dropbox/R Assignments/master-thesis/2_code/03_models.R", echo=TRUE)
source("C:/Users/joaov/Dropbox/R Assignments/master-thesis/2_code/03_projected_data.R", echo=TRUE)
source("C:/Users/joaov/Dropbox/R Assignments/master-thesis/2_code/04_time_series.R", echo=TRUE)
h = 90
fcast <- forecast(ts_model_exp, h=h)
autoplot(fcast)
autoplot(multivariate_ts[,'log_electric'], series="Data") +
autolayer(fitted(ts_model_3), series="Fitted") +
xlab("Year/Month") + ylab("BEV Stock (log transformed)") +
guides(colour=guide_legend(title=" "))
pacman::p_load(
# Core Data Manipulation and Tidying
dplyr,        # Data manipulation: filter, summarize, mutate, and more
tidyr,        # Data tidying: pivot, handle missing values, reshape
janitor,      # Clean messy data and create summary tables
# Data Import and Export
readr,        # Read flat files (CSV, TSV) into tibbles
readxl,       # Read Excel files (.xls, .xlsx) into data frames
basedosdados, # Access Brazilian public data via BigQuery
httr,         # Perform HTTP requests for web API interactions
archive,      # Extract files from compressed archives (.zip, .tar.gz)
# Data Visualization
ggplot2,      # Create customizable visualizations with grammar of graphics
scales,       # Format axes and legends (percentages, currencies)
viridis,      # Colorblind-friendly color palettes
RColorBrewer, # Additional color palettes for plots
gridExtra,    # Arrange multiple grid-based plots on a page
# String Manipulation
stringr,      # Simple and consistent string manipulation functions
stringi,      # Advanced string manipulation with Unicode support
# Date-Time Handling
lubridate,    # Simplify date and time parsing and manipulation
# Geographic and Spatial Data
geobr,        # Access Brazilian geographic data (e.g., shapefiles)
deflateBR,    # Deflate nominal Brazilian Reais using price indexes
sf,           # Handle spatial/geographic data in R
# Reporting and Tables
gt,           # Create publication-quality tables
stargazer,    # Generate regression tables in LaTeX/HTML/text formats
# Machine Learning and Statistics
caret,        # Comprehensive machine learning framework
Metrics,      # Evaluate model performance (RMSE, MAE, etc.)
glmnet,       # Regularized generalized linear models (Lasso, Ridge)
earth,        # Multivariate Adaptive Regression Splines
vip,          # Variable Importance Plots
pdp,          # Partial Dependence Plots
car,          # Companion to Applied Regression (diagnostic functions)
DescTools,    # Tools for descriptive statistics
rsample,      # Functions for resampling data
# Econometrics and Time Series Analysis
plm,          # Panel data analysis (fixed/random effects models)
urca,         # Unit root and cointegration tests for time series
forecast,     # Time series forecasting functions and models
forcats,
astsa
)
source("./2_code/00_packages.R")
plot(jj, type="o", ylab="Quarterly Earnings per Share")
fit = lm(chicken~time(chicken), na.action=NULL) # regress chicken on time
par(mfrow=c(2,1))
plot(resid(fit), type="o", main="detrended")
plot(diff(chicken), type="o", main="first difference")
par(mfrow=c(3,1)) # plot ACFs
acf(chicken, 48, main="chicken")
acf(resid(fit), 48, main="detrended")
acf(diff(chicken), 48, main="first difference")
chicken
multivariate_ts
fit <- lm(multivariate_ts$electrict~time(multivariate_ts$electrict), na.action=NULL) # regress chicken on time
electric <- multivariate_ts$electric
fit <- lm(multivariate_ts ~time(multivariate_ts), na.action=NULL) # regress chicken on time
fit <- lm(multivariate_ts ~time(multivariate_ts), na.action=NULL) # regress chicken on time
par(mfrow=c(2,1))
plot(resid(fit), type="o", main="detrended")
fleet_df_ts
ts(start = c(start_year, start_month),frequency = 12)
single_ts <- fleet_df_ts %>%
select(date, electric)
single_ts
fit <- lm(single_ts ~time(single_ts), na.action=NULL) # regress chicken on time
fit <- lm(single_ts ~time(single_ts), na.action=NULL) # regress chicken on time
chicken
?chicken
typeof(chicken)
typeof(single_ts)
typeof(fleet_df_ts)
fleet_df_ts
single_ts <- fleet_df_ts %>%
select(date, electric)
ts(start = c(start_year, start_month),frequency = 12)
single_ts
electric_double <- single_ts %>% pull(electric)
electric_double
electric
electric_double
chicken <- chicken
electric_ts <- ts(single_ts$electric, start = c(2013, 5), frequency = 12)
fit <- lm(electric_ts ~time(electric_ts), na.action=NULL) # regress chicken on time
par(mfrow=c(2,1))
plot(resid(fit), type="o", main="detrended")
plot(diff(electric_ts), type="o", main="first difference")
acf(electric_ts, 48, main="BEVs")
acf(resid(fit), 48, main="detrended")
acf(diff(chicken), 48, main="first difference")
par(mfrow=c(2,1))
plot(resid(fit), type="o", main="detrended")
plot(diff(electric_ts), type="o", main="first difference")
par(mfrow=c(3,1)) # plot ACFs
acf(electric_ts, 48, main="BEVs")
acf(resid(fit), 48, main="detrended")
acf(diff(chicken), 48, main="first difference")
fit <- lm(electric_ts ~time(electric_ts), na.action=NULL) # regress chicken on time
par(mfrow=c(2,1))
plot(resid(fit), type="o", main="detrended")
plot(diff(electric_ts), type="o", main="first difference")
par(mfrow=c(3,1)) # plot ACFs
acf(electric_ts, 48, main="BEVs")
acf(resid(fit), 48, main="detrended")
acf(diff(electric_ts), 48, main="first difference")
# Save detrended and first difference plots
png("./4_plots/ts_detrended_and_first_difference.png", width = 800, height = 600)
par(mfrow = c(2, 1)) # Set up a 2x1 layout for plots
plot(resid(fit), type = "o", main = "Detrended")
plot(diff(electric_ts), type = "o", main = "First Difference")
dev.off() # Close the graphics device
# Save ACF plots
png("./4_plots/ts_acf_plots.png", width = 800, height = 900)
par(mfrow = c(3, 1)) # Set up a 3x1 layout for plots
acf(electric_ts, lag.max = 48, main = "BEVs")
acf(resid(fit), lag.max = 48, main = "Detrended")
acf(diff(electric_ts), lag.max = 48, main = "First Difference")
dev.off() # Close the graphics device
fit <- lm(electric_ts ~time(electric_ts), na.action=NULL) # regress chicken on time
par(mfrow=c(2,1))
plot(resid(fit), type="o", main="detrended")
plot(diff(electric_ts), type="o", main="first difference")
par(mfrow=c(3,1)) # plot ACFs
acf(electric_ts, 48, main="BEVs")
acf(resid(fit), 48, main="detrended")
acf(diff(electric_ts), 48, main="first difference")
fit <- lm(electric_ts ~time(electric_ts), na.action=NULL) # regress chicken on time
par(mfrow=c(2,1))
plot(resid(fit), type="o", main="detrended")
plot(diff(electric_ts), type="o", main="first difference")
par(mfrow=c(3,1)) # plot ACFs
acf(electric_ts, 48, main="BEVs")
acf(resid(fit), 48, main="Detrended")
acf(diff(electric_ts), 48, main="First difference")
pacman::p_load(
# Core Data Manipulation and Tidying
dplyr,        # Data manipulation: filter, summarize, mutate, and more
tidyr,        # Data tidying: pivot, handle missing values, reshape
janitor,      # Clean messy data and create summary tables
# Data Import and Export
readr,        # Read flat files (CSV, TSV) into tibbles
readxl,       # Read Excel files (.xls, .xlsx) into data frames
basedosdados, # Access Brazilian public data via BigQuery
httr,         # Perform HTTP requests for web API interactions
archive,      # Extract files from compressed archives (.zip, .tar.gz)
# Data Visualization
ggplot2,      # Create customizable visualizations with grammar of graphics
scales,       # Format axes and legends (percentages, currencies)
viridis,      # Colorblind-friendly color palettes
RColorBrewer, # Additional color palettes for plots
gridExtra,    # Arrange multiple grid-based plots on a page
# String Manipulation
stringr,      # Simple and consistent string manipulation functions
stringi,      # Advanced string manipulation with Unicode support
# Date-Time Handling
lubridate,    # Simplify date and time parsing and manipulation
# Geographic and Spatial Data
geobr,        # Access Brazilian geographic data (e.g., shapefiles)
deflateBR,    # Deflate nominal Brazilian Reais using price indexes
sf,           # Handle spatial/geographic data in R
# Reporting and Tables
gt,           # Create publication-quality tables
stargazer,    # Generate regression tables in LaTeX/HTML/text formats
# Machine Learning and Statistics
caret,        # Comprehensive machine learning framework
Metrics,      # Evaluate model performance (RMSE, MAE, etc.)
glmnet,       # Regularized generalized linear models (Lasso, Ridge)
earth,        # Multivariate Adaptive Regression Splines
vip,          # Variable Importance Plots
pdp,          # Partial Dependence Plots
car,          # Companion to Applied Regression (diagnostic functions)
DescTools,    # Tools for descriptive statistics
rsample,      # Functions for resampling data
# Econometrics and Time Series Analysis
plm,          # Panel data analysis (fixed/random effects models)
urca,         # Unit root and cointegration tests for time series
forecast,     # Time series forecasting functions and models
forcats,
astsa,
xts
)
fit_2 <- stl(single_ts, s.window = "periodic")
fit_2 <- stl(electric_ts, s.window = "periodic")
autoplot(fit)
library(ggfortify)
autoplot(fit_2)
pacman::p_load(
# Core Data Manipulation and Tidying
dplyr,        # Data manipulation: filter, summarize, mutate, and more
tidyr,        # Data tidying: pivot, handle missing values, reshape
janitor,      # Clean messy data and create summary tables
# Data Import and Export
readr,        # Read flat files (CSV, TSV) into tibbles
readxl,       # Read Excel files (.xls, .xlsx) into data frames
basedosdados, # Access Brazilian public data via BigQuery
httr,         # Perform HTTP requests for web API interactions
archive,      # Extract files from compressed archives (.zip, .tar.gz)
# Data Visualization
ggplot2,      # Create customizable visualizations with grammar of graphics
scales,       # Format axes and legends (percentages, currencies)
viridis,      # Colorblind-friendly color palettes
RColorBrewer, # Additional color palettes for plots
gridExtra,    # Arrange multiple grid-based plots on a page
# String Manipulation
stringr,      # Simple and consistent string manipulation functions
stringi,      # Advanced string manipulation with Unicode support
# Date-Time Handling
lubridate,    # Simplify date and time parsing and manipulation
# Geographic and Spatial Data
geobr,        # Access Brazilian geographic data (e.g., shapefiles)
deflateBR,    # Deflate nominal Brazilian Reais using price indexes
sf,           # Handle spatial/geographic data in R
# Reporting and Tables
gt,           # Create publication-quality tables
stargazer,    # Generate regression tables in LaTeX/HTML/text formats
# Machine Learning and Statistics
caret,        # Comprehensive machine learning framework
Metrics,      # Evaluate model performance (RMSE, MAE, etc.)
glmnet,       # Regularized generalized linear models (Lasso, Ridge)
earth,        # Multivariate Adaptive Regression Splines
vip,          # Variable Importance Plots
pdp,          # Partial Dependence Plots
car,          # Companion to Applied Regression (diagnostic functions)
DescTools,    # Tools for descriptive statistics
rsample,      # Functions for resampling data
# Econometrics and Time Series Analysis
plm,          # Panel data analysis (fixed/random effects models)
urca,         # Unit root and cointegration tests for time series
forecast,     # Time series forecasting functions and models
forcats,
astsa,
xts,
ggfortify
)
autoplot(fit_2)
autoplot(fit_2)
fit_2
