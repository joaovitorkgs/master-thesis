mean_hyb   = mean(mean_price_hybrid),
mean_ev    = mean(mean_price_electric),
median_gas = mean(median_price_gasoline),
median_hyb = mean(median_price_hybrid),
median_ev  = mean(median_price_electric),
min_gas    = mean(min_price_gasoline),
min_hyb    = mean(min_price_hybrid),
min_ev     = mean(min_price_electric)) %>%
mutate(ev_pc        = electric / population,
ff_pc        = (gasoline+diesel)/population,
log_electric = log(electric),
log_ff       = log(gasoline+diesel),
log_pop      = log(population))
View(fleet_df_b_uf)
# 1. Packages ------------------------------------------------------------------
source("./2_code/00_packages.R")
# 2. Loading data sets ---------------------------------------------------------
income_data_raw <- read_delim("1_raw_data/6_income/distribuicao-renda.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
# 3. Transforming data sets ----------------------------------------------------
rm(income_data)
# Income data used refers to yearly gross taxable income
income_data <- income_data_raw %>%
rename(avg_taxable_income = `Rendimentos Tributaveis - Média da RTB do Centil [R$]`,
sum_taxable_income = `Rendimentos Tributaveis - Soma da RTB do Centil [R$ milhões]`,
nr_taxpayers       = `Quantidade de Contribuintes`,
sigla_uf           = `Ente Federativo`,
year               = `Ano-calendário`,
percentile         = Centil) %>%
select(year, sigla_uf, percentile,
avg_taxable_income,
sum_taxable_income)
income_data$avg_taxable_income[is.na(income_data$avg_taxable_income)] = 0
income_data$sum_taxable_income[is.na(income_data$sum_taxable_income)] = 0
income_data <- income_data %>%
mutate(
avg_taxable_income = gsub("\\.", "", avg_taxable_income),  # Remove thousands separator (.)
avg_taxable_income = gsub(",", ".",  avg_taxable_income),  # Replace decimal separator (,) with dot (.)
avg_taxable_income = as.numeric(     avg_taxable_income),       # Convert to numeric
sum_taxable_income = gsub("\\.", "", sum_taxable_income),  # Remove thousands separator (.)
sum_taxable_income = gsub(",", ".",  sum_taxable_income),  # Replace decimal separator (,) with dot (.)
sum_taxable_income = as.numeric(     sum_taxable_income)
)
income_data_wide <- income_data %>%
filter(percentile %in% c(10,50,90,100)) %>%
pivot_wider(names_from = percentile, values_from = c(avg_taxable_income,sum_taxable_income)) %>%
filter(sigla_uf != "BRASIL") %>%
mutate("90_50_sum" = sum_taxable_income_90 / sum_taxable_income_50,
"90_10_sum" = sum_taxable_income_90 / sum_taxable_income_10,
"90_50_avg" = avg_taxable_income_90 / avg_taxable_income_50,
"90_10_avg" = avg_taxable_income_90 / avg_taxable_income_10)
if (!file.exists(  "./3_processed_data/income_data_wide.csv")) {
write_csv(income_data_wide,
file = "./3_processed_data/income_data_wide.csv")
print("File succesfully written.")
} else {
print("File already exists in the repository.")
}
income_data_wide
summary(income_data_wide)
# Function to perform linear regression and predict future values
predict_future <- function(data, var_name) {
model <- lm(paste(var_name, "~ year"), data = data)
new_years <- data.frame(year = 2021:2023)
predictions <- predict(model, newdata = new_years)
return(predictions)
}
# Group the data by sigla_uf
grouped_df <- income_data_wide %>% group_by(sigla_uf)
# Create a list of column names to predict
cols_to_predict <- names(income_data_wide)[3:ncol(df)]
# Create a list of column names to predict
cols_to_predict <- names(income_data_wide)[3:ncol(income_data_wide)]
each = n() / 3
# Apply the prediction function to each group and each column
synthetic_data <- grouped_df %>%
summarise(across(all_of(cols_to_predict),
~list(predict_future(cur_data(), cur_column())))) %>%
unnest(cols = all_of(cols_to_predict)) %>%
mutate(year = rep(2021:2023, each = n() / 3))
income_data_wide <- income_data %>%
filter(percentile %in% c(10,50,90,100)) %>%
pivot_wider(names_from = percentile, values_from = c(avg_taxable_income,sum_taxable_income)) %>%
filter(sigla_uf != "BRASIL")
# Function to perform linear regression and predict future values
predict_future <- function(data, var_name) {
model <- lm(paste(var_name, "~ year"), data = data)
new_years <- data.frame(year = 2021:2023)
predictions <- predict(model, newdata = new_years)
return(predictions)
}
# Group the data by sigla_uf
grouped_df <- income_data_wide %>% group_by(sigla_uf)
# Create a list of column names to predict
cols_to_predict <- names(income_data_wide)[3:ncol(income_data_wide)]
# Group the data by sigla_uf
grouped_df <- income_data_wide %>% group_by(sigla_uf)
# Create a list of column names to predict
cols_to_predict <- names(income_data_wide)[3:ncol(income_data_wide)]
# Apply the prediction function to each group and each column
synthetic_data <- grouped_df %>%
summarise(across(all_of(cols_to_predict),
~list(predict_future(cur_data(), cur_column())))) %>%
unnest(cols = all_of(cols_to_predict)) %>%
mutate(year = rep(2021:2023, each = n() / 3))
View(synthetic_data)
# Apply the prediction function to each group and each column
synthetic_data <- grouped_df %>%
summarise(across(all_of(cols_to_predict),
~list(predict_future(cur_data(), cur_column())))) %>%
unnest(cols = all_of(cols_to_predict)) %>%
mutate(year = rep(2021:2023))
# Define the years for prediction
future_years <- c(2021, 2022, 2023)
# Function to fit a linear model and predict future values
predict_future_values <- function(data, future_years) {
# Fit a linear model for each income column
lm_10 <- lm(avg_taxable_income_10 ~ year, data = data)
lm_50 <- lm(avg_taxable_income_50 ~ year, data = data)
lm_90 <- lm(avg_taxable_income_90 ~ year, data = data)
lm_100 <- lm(avg_taxable_income_100 ~ year, data = data)
# Predict values for future years
predictions <- data.frame(
year = future_years,
sigla_uf = unique(data$sigla_uf),
avg_taxable_income_10 = predict(lm_10, newdata = data.frame(year = future_years)),
avg_taxable_income_50 = predict(lm_50, newdata = data.frame(year = future_years)),
avg_taxable_income_90 = predict(lm_90, newdata = data.frame(year = future_years)),
avg_taxable_income_100 = predict(lm_100, newdata = data.frame(year = future_years))
)
return(predictions)
}
# Apply the function to each state (sigla_uf) and combine results
synthetic_data <- fipe_price_monthly_trends_deflated %>%
group_by(sigla_uf) %>%
group_split() %>%
lapply(predict_future_values, future_years = future_years) %>%
bind_rows()
# Apply the function to each state (sigla_uf) and combine results
synthetic_data <- income_data_wide %>%
group_by(sigla_uf) %>%
group_split() %>%
lapply(predict_future_values, future_years = future_years) %>%
bind_rows()
View(synthetic_data)
# Combine synthetic data with the original dataframe
income_data_wide <- income_data_wide %>%
bind_rows(synthetic_data)
# Combine synthetic data with the original dataframe
income_data_wide <- income_data_wide %>%
bind_rows(synthetic_data) %>%
mutate("90_50_sum" = sum_taxable_income_90 / sum_taxable_income_50,
"90_10_sum" = sum_taxable_income_90 / sum_taxable_income_10,
"90_50_avg" = avg_taxable_income_90 / avg_taxable_income_50,
"90_10_avg" = avg_taxable_income_90 / avg_taxable_income_10)
income_data_wide <- income_data %>%
filter(percentile %in% c(10,50,90,100)) %>%
pivot_wider(names_from = percentile, values_from = c(avg_taxable_income,sum_taxable_income)) %>%
if (!file.exists(  "./3_processed_data/income_data_wide.csv")) {
write_csv(income_data_wide,
file = "./3_processed_data/income_data_wide.csv")
print("File succesfully written.")
} else {
print("File already exists in the repository.")
}
income_data_wide <- income_data %>%
filter(percentile %in% c(10,50,90,100)) %>%
pivot_wider(names_from = percentile, values_from = c(avg_taxable_income,sum_taxable_income))
# Define the years for prediction
future_years <- c(2021, 2022, 2023)
# Function to fit a linear model and predict future values
predict_future_values <- function(data, future_years) {
# Fit a linear model for each income column
lm_10 <- lm(avg_taxable_income_10 ~ year, data = data)
lm_50 <- lm(avg_taxable_income_50 ~ year, data = data)
lm_90 <- lm(avg_taxable_income_90 ~ year, data = data)
lm_100 <- lm(avg_taxable_income_100 ~ year, data = data)
# Predict values for future years
predictions <- data.frame(
year = future_years,
sigla_uf = unique(data$sigla_uf),
avg_taxable_income_10 = predict(lm_10, newdata = data.frame(year = future_years)),
avg_taxable_income_50 = predict(lm_50, newdata = data.frame(year = future_years)),
avg_taxable_income_90 = predict(lm_90, newdata = data.frame(year = future_years)),
avg_taxable_income_100 = predict(lm_100, newdata = data.frame(year = future_years))
)
return(predictions)
}
# Apply the function to each state (sigla_uf) and combine results
synthetic_data <- income_data_wide %>%
group_by(sigla_uf) %>%
group_split() %>%
lapply(predict_future_values, future_years = future_years) %>%
bind_rows()
# Combine synthetic data with the original dataframe
income_data_wide <- income_data_wide %>%
bind_rows(synthetic_data) %>%
mutate("90_50_sum" = sum_taxable_income_90 / sum_taxable_income_50,
"90_10_sum" = sum_taxable_income_90 / sum_taxable_income_10,
"90_50_avg" = avg_taxable_income_90 / avg_taxable_income_50,
"90_10_avg" = avg_taxable_income_90 / avg_taxable_income_10)
income_data_br_wide <- income_data_wide %>%
filter(sigla_uf == "BRASIL")
View(income_data_br_wide)
# Function to fit a linear model and predict future values
predict_future_values <- function(data, future_years) {
# Fit a linear model for each income column
avg_lm_10  <- lm(avg_taxable_income_10  ~  year, data = data)
avg_lm_50  <- lm(avg_taxable_income_50  ~  year, data = data)
avg_lm_90  <- lm(avg_taxable_income_90  ~  year, data = data)
avg_lm_100 <- lm(avg_taxable_income_100 ~  year, data = data)
sum_lm_10  <- lm(sum_taxable_income_10  ~  year, data = data)
sum_lm_50  <- lm(sum_taxable_income_50  ~  year, data = data)
sum_lm_90  <- lm(sum_taxable_income_90  ~  year, data = data)
sum_lm_100 <- lm(sum_taxable_income_100 ~  year, data = data)
# Predict values for future years
predictions <- data.frame(
year = future_years,
sigla_uf = unique(data$sigla_uf),
avg_taxable_income_10  = predict(avg_lm_10,  newdata = data.frame(year = future_years)),
avg_taxable_income_50  = predict(avg_lm_50,  newdata = data.frame(year = future_years)),
avg_taxable_income_90  = predict(avg_lm_90,  newdata = data.frame(year = future_years)),
avg_taxable_income_100 = predict(avg_lm_100, newdata = data.frame(year = future_years)),
sum_taxable_income_10  = predict(sum_lm_10,  newdata = data.frame(year = future_years)),
sum_taxable_income_50  = predict(sum_lm_50,  newdata = data.frame(year = future_years)),
sum_taxable_income_90  = predict(sum_lm_90,  newdata = data.frame(year = future_years)),
sum_taxable_income_100 = predict(sum_lm_100, newdata = data.frame(year = future_years))
)
return(predictions)
}
# Apply the function to each state (sigla_uf) and combine results
synthetic_data <- income_data_wide %>%
group_by(sigla_uf) %>%
group_split() %>%
lapply(predict_future_values, future_years = future_years) %>%
bind_rows()
View(synthetic_data)
# Combine synthetic data with the original dataframe
income_data_wide <- income_data_wide %>%
bind_rows(synthetic_data) %>%
mutate("90_50_sum" = sum_taxable_income_90 / sum_taxable_income_50,
"90_10_sum" = sum_taxable_income_90 / sum_taxable_income_10,
"90_50_avg" = avg_taxable_income_90 / avg_taxable_income_50,
"90_10_avg" = avg_taxable_income_90 / avg_taxable_income_10)
income_data_wide_uf <- income_data_wide %>%
filter(sigla_uf != "BRASIL")
View(income_data_wide_uf)
# Define the years for prediction
future_years <- c(2021, 2022, 2023)
# Function to fit a linear model and predict future values
predict_future_values <- function(data, future_years) {
# Fit a linear model for each income column
avg_lm_10  <- lm(avg_taxable_income_10  ~  year, data = data)
avg_lm_50  <- lm(avg_taxable_income_50  ~  year, data = data)
avg_lm_90  <- lm(avg_taxable_income_90  ~  year, data = data)
avg_lm_100 <- lm(avg_taxable_income_100 ~  year, data = data)
sum_lm_10  <- lm(sum_taxable_income_10  ~  year, data = data)
sum_lm_50  <- lm(sum_taxable_income_50  ~  year, data = data)
sum_lm_90  <- lm(sum_taxable_income_90  ~  year, data = data)
sum_lm_100 <- lm(sum_taxable_income_100 ~  year, data = data)
# Predict values for future years
predictions <- data.frame(
year = future_years,
sigla_uf = unique(data$sigla_uf),
avg_taxable_income_10  = predict(avg_lm_10,  newdata = data.frame(year = future_years)),
avg_taxable_income_50  = predict(avg_lm_50,  newdata = data.frame(year = future_years)),
avg_taxable_income_90  = predict(avg_lm_90,  newdata = data.frame(year = future_years)),
avg_taxable_income_100 = predict(avg_lm_100, newdata = data.frame(year = future_years)),
sum_taxable_income_10  = predict(sum_lm_10,  newdata = data.frame(year = future_years)),
sum_taxable_income_50  = predict(sum_lm_50,  newdata = data.frame(year = future_years)),
sum_taxable_income_90  = predict(sum_lm_90,  newdata = data.frame(year = future_years)),
sum_taxable_income_100 = predict(sum_lm_100, newdata = data.frame(year = future_years))
)
return(predictions)
}
# Apply the function to each state (sigla_uf) and combine results
synthetic_data <- income_data_wide %>%
group_by(sigla_uf) %>%
group_split() %>%
lapply(predict_future_values, future_years = future_years) %>%
bind_rows()
View(synthetic_data)
income_data_raw <- read_delim("1_raw_data/6_income/distribuicao-renda.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
# 3. Transforming data sets ----------------------------------------------------
rm(income_data)
# Income data used refers to yearly gross taxable income
income_data <- income_data_raw %>%
rename(avg_taxable_income = `Rendimentos Tributaveis - Média da RTB do Centil [R$]`,
sum_taxable_income = `Rendimentos Tributaveis - Soma da RTB do Centil [R$ milhões]`,
nr_taxpayers       = `Quantidade de Contribuintes`,
sigla_uf           = `Ente Federativo`,
year               = `Ano-calendário`,
percentile         = Centil) %>%
select(year, sigla_uf, percentile,
avg_taxable_income,
sum_taxable_income)
income_data$avg_taxable_income[is.na(income_data$avg_taxable_income)] = 0
income_data$sum_taxable_income[is.na(income_data$sum_taxable_income)] = 0
income_data <- income_data %>%
mutate(
avg_taxable_income = gsub("\\.", "", avg_taxable_income),  # Remove thousands separator (.)
avg_taxable_income = gsub(",", ".",  avg_taxable_income),  # Replace decimal separator (,) with dot (.)
avg_taxable_income = as.numeric(     avg_taxable_income),       # Convert to numeric
sum_taxable_income = gsub("\\.", "", sum_taxable_income),  # Remove thousands separator (.)
sum_taxable_income = gsub(",", ".",  sum_taxable_income),  # Replace decimal separator (,) with dot (.)
sum_taxable_income = as.numeric(     sum_taxable_income)
)
# Combine synthetic data with the original dataframe
income_data_wide_syn <- income_data_wide %>%
bind_rows(synthetic_data) %>%
mutate("90_50_sum" = sum_taxable_income_90 / sum_taxable_income_50,
"90_10_sum" = sum_taxable_income_90 / sum_taxable_income_10,
"90_50_avg" = avg_taxable_income_90 / avg_taxable_income_50,
"90_10_avg" = avg_taxable_income_90 / avg_taxable_income_10)
View(income_data_wide_syn)
synthetic_data
income_data_wide_syn <- income_data_wide %>%
bind_rows(synthetic_data)
View(income_data_wide_syn)
# Define the years for prediction
future_years <- c(2021, 2022, 2023)
# Function to fit a linear model and predict future values
predict_future_values <- function(data, future_years) {
# Fit a linear model for each income column
avg_lm_10  <- lm(avg_taxable_income_10  ~ year, data = data)
avg_lm_50  <- lm(avg_taxable_income_50  ~ year, data = data)
avg_lm_90  <- lm(avg_taxable_income_90  ~ year, data = data)
avg_lm_100 <- lm(avg_taxable_income_100 ~ year, data = data)
sum_lm_10  <- lm(sum_taxable_income_10  ~ year, data = data)
sum_lm_50  <- lm(sum_taxable_income_50  ~ year, data = data)
sum_lm_90  <- lm(sum_taxable_income_90  ~ year, data = data)
sum_lm_100 <- lm(sum_taxable_income_100 ~ year, data = data)
# Predict values for future years
predictions <- data.frame(
year = future_years,
sigla_uf = unique(data$sigla_uf),
avg_taxable_income_10  = predict(avg_lm_10, newdata = data.frame(year = future_years)),
avg_taxable_income_50  = predict(avg_lm_50, newdata = data.frame(year = future_years)),
avg_taxable_income_90  = predict(avg_lm_90, newdata = data.frame(year = future_years)),
avg_taxable_income_100 = predict(avg_lm_100, newdata = data.frame(year = future_years)),
sum_taxable_income_10  = predict(sum_lm_10, newdata = data.frame(year = future_years)),
sum_taxable_income_50  = predict(sum_lm_50, newdata = data.frame(year = future_years)),
sum_taxable_income_90  = predict(sum_lm_90, newdata = data.frame(year = future_years)),
sum_taxable_income_100 = predict(sum_lm_100, newdata = data.frame(year = future_years))
)
return(predictions)
}
# Apply the function to each state (sigla_uf) and combine results
synthetic_data <- income_data_wide %>%
group_by(sigla_uf) %>%
group_map(~ predict_future_values(.x, future_years)) %>%
bind_rows()
View(synthetic_data)
# Function to fit a linear model and predict future values
predict_future_values <- function(data, future_years) {
if (nrow(data) < 2) {
# Return an empty dataframe if there's insufficient data
return(data.frame())
}
# Fit linear models
avg_lm_10  <- lm(avg_taxable_income_10  ~ year, data = data)
avg_lm_50  <- lm(avg_taxable_income_50  ~ year, data = data)
avg_lm_90  <- lm(avg_taxable_income_90  ~ year, data = data)
avg_lm_100 <- lm(avg_taxable_income_100 ~ year, data = data)
sum_lm_10  <- lm(sum_taxable_income_10  ~ year, data = data)
sum_lm_50  <- lm(sum_taxable_income_50  ~ year, data = data)
sum_lm_90  <- lm(sum_taxable_income_90  ~ year, data = data)
sum_lm_100 <- lm(sum_taxable_income_100 ~ year, data = data)
# Predict values for future years
predictions <- data.frame(
year = future_years,
sigla_uf = ifelse(length(unique(data$sigla_uf)) > 0, unique(data$sigla_uf), NA),
avg_taxable_income_10  = predict(avg_lm_10, newdata = data.frame(year = future_years)),
avg_taxable_income_50  = predict(avg_lm_50, newdata = data.frame(year = future_years)),
avg_taxable_income_90  = predict(avg_lm_90, newdata = data.frame(year = future_years)),
avg_taxable_income_100 = predict(avg_lm_100, newdata = data.frame(year = future_years)),
sum_taxable_income_10  = predict(sum_lm_10, newdata = data.frame(year = future_years)),
sum_taxable_income_50  = predict(sum_lm_50, newdata = data.frame(year = future_years)),
sum_taxable_income_90  = predict(sum_lm_90, newdata = data.frame(year = future_years)),
sum_taxable_income_100 = predict(sum_lm_100, newdata = data.frame(year = future_years))
)
return(predictions)
}
# Apply the function to each state (sigla_uf) and combine results
synthetic_data <- income_data_wide %>%
group_by(sigla_uf) %>%
group_map(~ predict_future_values(.x, future_years)) %>%
bind_rows()
View(synthetic_data)
predict_future_values <- function(data, future_years) {
# Fit a linear model for each income column
avg_lm_10  <- lm(avg_taxable_income_10  ~ year, data = data)
avg_lm_50  <- lm(avg_taxable_income_50  ~ year, data = data)
avg_lm_90  <- lm(avg_taxable_income_90  ~ year, data = data)
avg_lm_100 <- lm(avg_taxable_income_100 ~ year, data = data)
sum_lm_10  <- lm(sum_taxable_income_10  ~ year, data = data)
sum_lm_50  <- lm(sum_taxable_income_50  ~ year, data = data)
sum_lm_90  <- lm(sum_taxable_income_90  ~ year, data = data)
sum_lm_100 <- lm(sum_taxable_income_100 ~ year, data = data)
# Predict values for future years
predictions <- data.frame(
year = future_years,
sigla_uf = unique(data$sigla_uf),
avg_taxable_income_10  = predict(avg_lm_10, newdata = data.frame(year = future_years)),
avg_taxable_income_50  = predict(avg_lm_50, newdata = data.frame(year = future_years)),
avg_taxable_income_90  = predict(avg_lm_90, newdata = data.frame(year = future_years)),
avg_taxable_income_100 = predict(avg_lm_100, newdata = data.frame(year = future_years)),
sum_taxable_income_10  = predict(sum_lm_10, newdata = data.frame(year = future_years)),
sum_taxable_income_50  = predict(sum_lm_50, newdata = data.frame(year = future_years)),
sum_taxable_income_90  = predict(sum_lm_90, newdata = data.frame(year = future_years)),
sum_taxable_income_100 = predict(sum_lm_100, newdata = data.frame(year = future_years))
)
return(predictions)
}
# Apply the function to each state (sigla_uf) and combine results
synthetic_data <- income_data_wide %>%
group_by(sigla_uf) %>%
group_map(~ predict_future_values(.x, future_years)) %>%
bind_rows()
# Define the years for prediction
future_years <- c(2021, 2022, 2023)
# Function to fit a linear model and predict future values
predict_future_values <- function(data, future_years) {
# Fit a linear model for each income column
avg_lm_10  <- lm(avg_taxable_income_10  ~ year, data = data)
avg_lm_50  <- lm(avg_taxable_income_50  ~ year, data = data)
avg_lm_90  <- lm(avg_taxable_income_90  ~ year, data = data)
avg_lm_100 <- lm(avg_taxable_income_100 ~ year, data = data)
sum_lm_10  <- lm(sum_taxable_income_10  ~ year, data = data)
sum_lm_50  <- lm(sum_taxable_income_50  ~ year, data = data)
sum_lm_90  <- lm(sum_taxable_income_90  ~ year, data = data)
sum_lm_100 <- lm(sum_taxable_income_100 ~ year, data = data)
# Predict values for future years
predictions <- data.frame(
year = future_years,
sigla_uf = unique(data$sigla_uf),
avg_taxable_income_10  = predict(avg_lm_10, newdata = data.frame(year = future_years)),
avg_taxable_income_50  = predict(avg_lm_50, newdata = data.frame(year = future_years)),
avg_taxable_income_90  = predict(avg_lm_90, newdata = data.frame(year = future_years)),
avg_taxable_income_100 = predict(avg_lm_100, newdata = data.frame(year = future_years)),
sum_taxable_income_10  = predict(sum_lm_10, newdata = data.frame(year = future_years)),
sum_taxable_income_50  = predict(sum_lm_50, newdata = data.frame(year = future_years)),
sum_taxable_income_90  = predict(sum_lm_90, newdata = data.frame(year = future_years)),
sum_taxable_income_100 = predict(sum_lm_100, newdata = data.frame(year = future_years))
)
return(predictions)
}
# Apply the function to each state (sigla_uf) and combine results
synthetic_data <- income_data_wide %>%
group_by(sigla_uf) %>%
group_map(~ predict_future_values(.x, future_years)) %>%
bind_rows()
# Define the years for prediction
future_years <- data.frame(year = c(2021, 2022, 2023))
# Define a function to fit linear regression and predict future values
predict_future_values <- function(data) {
# Fit linear models for each income column
avg_models <- lapply(c("avg_taxable_income_10", "avg_taxable_income_50",
"avg_taxable_income_90", "avg_taxable_income_100"), function(col) {
lm(as.formula(paste(col, "~ year")), data = data)
})
sum_models <- lapply(c("sum_taxable_income_10", "sum_taxable_income_50",
"sum_taxable_income_90", "sum_taxable_income_100"), function(col) {
lm(as.formula(paste(col, "~ year")), data = data)
})
# Predict future values for each column
avg_predictions <- sapply(avg_models, function(model) predict(model, newdata = future_years))
sum_predictions <- sapply(sum_models, function(model) predict(model, newdata = future_years))
# Combine predictions into a single data frame
predictions <- cbind(future_years,
avg_predictions,
sum_predictions)
colnames(predictions)[-1] <- c("avg_taxable_income_10", "avg_taxable_income_50",
"avg_taxable_income_90", "avg_taxable_income_100",
"sum_taxable_income_10", "sum_taxable_income_50",
"sum_taxable_income_90", "sum_taxable_income_100")
return(predictions)
}
# Apply the function to each state (sigla_uf)
synthetic_data <- your_data %>%
group_by(sigla_uf) %>%
group_split() %>%
lapply(predict_future_values) %>%
bind_rows(.id = "group") %>%
mutate(sigla_uf = unique(your_data$sigla_uf)[as.numeric(group)]) %>%
select(-group)
# Apply the function to each state (sigla_uf)
synthetic_data <- income_data_wide %>%
group_by(sigla_uf) %>%
group_split() %>%
lapply(predict_future_values) %>%
bind_rows(.id = "group") %>%
mutate(sigla_uf = unique(your_data$sigla_uf)[as.numeric(group)]) %>%
select(-group)
# Apply the function to each state (sigla_uf)
synthetic_data <- income_data_wide %>%
group_by(sigla_uf) %>%
group_split() %>%
lapply(predict_future_values) %>%
bind_rows(.id = "group") %>%
mutate(sigla_uf = unique(income_data_wide$sigla_uf)[as.numeric(group)]) %>%
select(-group)
View(synthetic_data)
# Combine synthetic data with the original dataframe
income_data_wide_syn <- income_data_wide %>%
bind_rows(synthetic_data) %>%
mutate("90_50_sum" = sum_taxable_income_90 / sum_taxable_income_50,
"90_10_sum" = sum_taxable_income_90 / sum_taxable_income_10,
"90_50_avg" = avg_taxable_income_90 / avg_taxable_income_50,
"90_10_avg" = avg_taxable_income_90 / avg_taxable_income_10)
View(synthetic_data)
