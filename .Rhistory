height   = 8,
width    = 10
)
print("File successfully saved.")
} else {
print("File already exists in the directory.")
}
accuracy_TS_df <- data.frame(accuracy_TS) %>%
mutate(model = "Linear")
accuracy_ETS_df <- data.frame(accuracy_ETS) %>%
mutate(model = "ETS")
accuracy_ARIMA_df <- data.frame(accuracy_ARIMA) %>%
mutate(model = "ARIMA")
accuracy_VA_df <- data.frame(accuracy_VA) %>%
mutate(model = "VA")
accuracy_all_cf <- accuracy_TS_df %>%
rbind(accuracy_ETS_df,accuracy_ARIMA_df, accuracy_VA_df) %>%
select(model,ME,RMSE,MAE,MPE,MAPE,MASE,ACF1) %>%
select(model,RMSE,MAE,MAPE) %>%
rename(Model = model)
accuracy_Prophet_df <- tail(df_p,1) %>%
mutate(Model = "Prophet") %>%
rename(
MSE   = mse,
RMSE  = rmse,
MAE   = mae,
MAPE  = mape,
MDAPE = mdape,
SMAPE = smape,
) %>%
select(Model,RMSE,MAE,MAPE)
accuracy_all_cf <- accuracy_all_cf %>%
rbind(accuracy_Prophet_df)
rownames(accuracy_all_cf) <-  NULL
if (    !file.exists("./6_tables/accuracy_all_models.csv")) {
write.table(file = "./6_tables/accuracy_all_models.csv",
x    = accuracy_all_cf,
sep  = ";",
row.names = FALSE)
print("File successfully saved.")
} else {
print("File already exists in the repository.")
}
fit_TS %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
fit_ETS %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
fit_ARIMA %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
fcast_VA_selected_BEV %>%
residuals() %>% ggtsdisplay(plot.type = "histogram")
plot_fcast_ARIMA_blank    <- plot_fcast_ARIMA   +
theme(plot.title    = element_blank(),
plot.subtitle = element_blank(),
axis.title.y  = element_blank(),
axis.title.x  = element_blank())
plot_fcast_ETS_blank      <- plot_fcast_ETS     +
theme(plot.title    = element_blank(),
plot.subtitle = element_blank(),
axis.title.y  = element_blank(),
axis.title.x  = element_blank())+
scale_y_continuous(limits = c(0, 150000), labels = scales::comma)
plot_fcast_TS_blank       <- plot_fcast_TS      +
theme(plot.title    = element_blank(),
plot.subtitle = element_blank(),
axis.title.y  = element_blank(),
axis.title.x  = element_blank())+
scale_y_continuous(limits = c(0, 750000), labels = scales::comma)
plot_fcast_Prophet_blank  <- plot_fcast_Prophet +
theme(plot.title    = element_blank(),
plot.subtitle = element_blank(),
axis.title.y  = element_blank(),
axis.title.x  = element_blank())
plot_fcast_all <- grid.arrange(
grobs = list(
arrangeGrob(plot_fcast_TS_blank,      top = "(a) Linear"),
arrangeGrob(plot_fcast_ETS_blank,     top = "(b) ETS"),
arrangeGrob(plot_fcast_ARIMA_blank,   top = "(c) ARIMA"),
arrangeGrob(plot_fcast_Prophet_blank, top = "(d) Prophet")
),
ncol = 2,
top = textGrob("BEV Stock in Brazil: Forecast Comparison Across Models", gp = gpar(fontsize = 16)),
bottom = textGrob("Year", gp = gpar(fontsize = 10)),
left = textGrob("BEV Stock",
rot = 90,  # Full 90Â° rotation
gp = gpar(fontsize = 10))
)
if (!file.exists("./4_plots/plot_fcast_all.png")) {
ggsave(        "./4_plots/plot_fcast_all.png",
plot   = plot_fcast_all,
height = 8,
width  = 10)
print("File successfully saved.")
} else {
print("File already exists in the repository.")
}
# Extracting data from model
fcast_TS_data <- fcast_TS$x %>%
cbind(fcast_TS$lower, fcast_TS$upper, fcast_TS$mean)
# Organizing data frame
fcast_TS_df <- data.frame(
date = as.Date(time(fcast_TS_data)),
actual = as.numeric(fcast_TS_data[,1]),
TS_lower_80 = as.numeric(fcast_TS_data[,2]),
TS_lower_95 = as.numeric(fcast_TS_data[,3]),
TS_upper_80 = as.numeric(fcast_TS_data[,4]),
TS_upper_95 = as.numeric(fcast_TS_data[,5]),
TS_mean     = as.numeric(fcast_TS_data[,6])
)
# Testing data visualization
plot_fcast_TS_2 <- ggplot(fcast_TS_df, aes(x = date, y = actual)) +
# Observed values from 2020 to 2025
geom_line(color = "black", size = 1) +
# TS projections
geom_line(aes(y = TS_mean), color = "red", size = 0.8, linetype = "dashed") +
geom_ribbon(data = subset(fcast_TS_df, is.na(actual)),
aes(ymin = TS_lower_95, ymax = TS_upper_95), fill = "red", alpha = 0.2) +
geom_ribbon(data = subset(fcast_TS_df, is.na(actual)),
aes(ymin = TS_lower_80, ymax = TS_upper_80), fill = "red", alpha = 0.3) +
# Plot labels and theme
labs(title = "Projected Values: TS Model",
x = "Date",
y = "Value") +
theme_bw() +
scale_x_date(date_breaks = "12 month", date_labels = "%Y") +
scale_y_continuous(labels = comma) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
if (!file.exists("./4_plots/plot_fcast_TS_2.png")) {
ggsave(        "./4_plots/plot_fcast_TS_2.png",
plot   = plot_fcast_TS_2,
height = 6,
width  = 8)
print("File successfully saved.")
} else {
print("File already exists in the repository.")
}
# Extracting data from model
fcast_ETS_data <- fcast_ETS$x %>%
cbind(fcast_ETS$lower, fcast_ETS$upper, fcast_ETS$mean)
# Organizing data frame
fcast_ETS_df <- data.frame(
date = as.Date(time(fcast_ETS_data)),
actual = as.numeric(fcast_ETS_data[,1]),
ETS_lower_80 = as.numeric(fcast_ETS_data[,2]),
ETS_lower_95 = as.numeric(fcast_ETS_data[,3]),
ETS_upper_80 = as.numeric(fcast_ETS_data[,4]),
ETS_upper_95 = as.numeric(fcast_ETS_data[,5]),
ETS_mean     = as.numeric(fcast_ETS_data[,6])
)
# Testing data visualization
plot_fcast_ETS_2 <- ggplot(fcast_ETS_df, aes(x = date, y = actual)) +
# Observed values from 2020 to 2025
geom_line(color = "black", size = 1) +
# TS projections
geom_line(aes(y = ETS_mean), color = "orange3", size = 0.8, linetype = "dashed") +
geom_ribbon(data = subset(fcast_ETS_df, is.na(actual)),
aes(ymin = ETS_lower_95, ymax = ETS_upper_95), fill = "orange3", alpha = 0.2) +
geom_ribbon(data = subset(fcast_ETS_df, is.na(actual)),
aes(ymin = ETS_lower_80, ymax = ETS_upper_80), fill = "orange3", alpha = 0.3) +
# Plot labels and theme
labs(title = "Projected Values: ETS Model",
x = "Date",
y = "Value") +
theme_bw() +
scale_x_date(date_breaks = "12 month", date_labels = "%Y") +
scale_y_continuous(labels = comma) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
if (!file.exists("./4_plots/plot_fcast_ETS_2.png")) {
ggsave(        "./4_plots/plot_fcast_ETS_2.png",
plot   = plot_fcast_ETS_2,
height = 6,
width  = 8)
print("File successfully saved.")
} else {
print("File already exists in the repository.")
}
# Extracting data from model
fcast_ARIMA_data <- fcast_ARIMA$x %>%
cbind(fcast_ARIMA$lower, fcast_ARIMA$upper, fcast_ARIMA$mean)
# Organizing data frame
fcast_ARIMA_df <- data.frame(
date = as.Date(time(fcast_ARIMA_data)),
actual = as.numeric(fcast_ARIMA_data[,1]),
ARIMA_lower_80 = as.numeric(fcast_ARIMA_data[,2]),
ARIMA_lower_95 = as.numeric(fcast_ARIMA_data[,3]),
ARIMA_upper_80 = as.numeric(fcast_ARIMA_data[,4]),
ARIMA_upper_95 = as.numeric(fcast_ARIMA_data[,5]),
ARIMA_mean     = as.numeric(fcast_ARIMA_data[,6])
)
# Testing data visualization
plot_fcast_ARIMA_2 <- ggplot(fcast_ARIMA_df, aes(x = date, y = actual)) +
# Observed values from 2020 to 2025
geom_line(color = "black", size = 1) +
# ARIMA projections
geom_line(aes(y = ARIMA_mean), color = "blue", size = 0.8, linetype = "dashed") +
geom_ribbon(data = subset(fcast_ARIMA_df, is.na(actual)),
aes(ymin = ARIMA_lower_95, ymax = ARIMA_upper_95), fill = "blue", alpha = 0.2) +
geom_ribbon(data = subset(fcast_ARIMA_df, is.na(actual)),
aes(ymin = ARIMA_lower_80, ymax = ARIMA_upper_80), fill = "blue", alpha = 0.3) +
# Plot labels and theme
labs(title = "Projected Values: ARIMA Model",
x = "Date",
y = "Value") +
theme_bw() +
scale_x_date(date_breaks = "12 month", date_labels = "%Y") +
scale_y_continuous(labels = comma) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
if (!file.exists("./4_plots/plot_fcast_ARIMA_2.png")) {
ggsave(        "./4_plots/plot_fcast_ARIMA_2.png",
plot   = plot_fcast_ARIMA_2,
height = 6,
width  = 8)
print("File successfully saved.")
} else {
print("File already exists in the repository.")
}
fcast_Prophet_1 <- fcast_Prophet %>%
head(60) %>%
select(ds, yhat, yhat_lower, yhat_upper, trend_lower, trend_upper) %>%
mutate(across(c(yhat_lower, yhat_upper, trend_lower, trend_upper), ~NA)) %>%
rename(actual = yhat, # I have to correct this at some point; these are not the actual values
Prophet_lower_80      = yhat_lower,
Prophet_upper_80      = yhat_upper)
fcast_Prophet_2 <- fcast_Prophet %>%
tail(60) %>%
select(ds, yhat, yhat_lower, yhat_upper, trend_lower, trend_upper) %>%
rename(Prophet_lower_80      = yhat_lower,
Prophet_upper_80      = yhat_upper,
Prophet_mean          = yhat)
fcast_Prophet_data <- full_join(fcast_Prophet_1,fcast_Prophet_2)
# Organizing data frame
fcast_Prophet_df <- data.frame(
date = as.Date(fcast_Prophet_data$ds),
actual = as.numeric(fcast_ARIMA_data[,1]),
Prophet_lower_80 = as.numeric(fcast_Prophet_data$Prophet_lower_80),
Prophet_upper_80 = as.numeric(fcast_Prophet_data$Prophet_upper_80),
Prophet_mean     = as.numeric(fcast_Prophet_data$Prophet_mean))
# Testing data visualization
plot_fcast_Prophet_2 <- ggplot(fcast_Prophet_df, aes(x = date, y = actual)) +
# Observed values from 2020 to 2025
geom_line(color = "black", size = 1) +
# ARIMA projections
geom_line(aes(y = Prophet_mean), color = "brown4", size = 0.8, linetype = "dashed") +
geom_ribbon(data = subset(fcast_Prophet_df, is.na(actual)),
aes(ymin = Prophet_lower_80, ymax = Prophet_upper_80), fill = "brown4", alpha = 0.3) +
# Plot labels and theme
labs(title = "Projected Values: Prophet Model",
x = "Date",
y = "Value") +
theme_bw() +
scale_x_date(date_breaks = "12 month", date_labels = "%Y") +
scale_y_continuous(labels = comma) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
if (!file.exists("./4_plots/plot_fcast_Prophet_2.png")) {
ggsave(        "./4_plots/plot_fcast_Prophet_2.png",
plot   = plot_fcast_Prophet_2,
height = 6,
width  = 8)
print("File successfully saved.")
} else {
print("File already exists in the repository.")
}
# Creating data frame with projections
fc_dates <-    seq(from = as.Date("2025-01-01"),
to = as.Date("2029-12-01"),
by = "month")
# Extracting values from list object
VA_lower <- data.frame(fcast_VA_selected_BEV$lower) %>%
rename(VA_lower_80 = X80.,
VA_lower_95 = X95.)
VA_upper <- data.frame(fcast_VA_selected_BEV$upper) %>%
rename(VA_upper_80 = X80.,
VA_upper_95 = X95.)
VA_mean <- data.frame(fcast_VA_selected_BEV$mean) %>%
rename(VA_mean = fcast_VA_selected_BEV.mean)
fcast_VA_df_1 <- data.frame(
date = as.Date(time(fcast_ETS_data)),
actual = as.numeric(fcast_ETS_data[,1]))
# Adding values to projections data frame
fcast_VA_df_2 <- data.frame(fc_dates)
fcast_VA_df_2 <- fcast_VA_df_2 %>%
rename(date = fc_dates)
fcast_VA_df_2$VA_lower_80 <- VA_lower$VA_lower_80
fcast_VA_df_2$VA_lower_95 <- VA_lower$VA_lower_95
fcast_VA_df_2$VA_upper_80 <- VA_upper$VA_upper_80
fcast_VA_df_2$VA_upper_95 <- VA_upper$VA_upper_95
fcast_VA_df_2$VA_mean     <- VA_mean$VA_mean
fcast_VA_df <- full_join(fcast_VA_df_1, fcast_VA_df_2, by = "date")
if (!file.exists("./4_plots/plot_fcast_VA_2.png")) {
ggsave(        "./4_plots/plot_fcast_VA_2.png",
plot   = plot_fcast_VA_2,
height = 6,
width  = 8)
print("File successfully saved.")
} else {
print("File already exists in the repository.")
}
# Testing data visualization
plot_fcast_VA_2 <- ggplot(fcast_VA_df, aes(x = date, y = actual)) +
# Observed values from 2020 to 2025
geom_line(color = "black", size = 1) +
# VA projections
geom_line(aes(y = VA_mean), color = "purple4", size = 0.8, linetype = "dashed") +
geom_ribbon(data = subset(fcast_VA_df, is.na(actual)),
aes(ymin = VA_lower_95, ymax = VA_upper_95), fill = "purple4", alpha = 0.2) +
geom_ribbon(data = subset(fcast_VA_df, is.na(actual)),
aes(ymin = VA_lower_80, ymax = VA_upper_80), fill = "purple4", alpha = 0.3) +
# Plot labels and theme
labs(title = "Projected Values: VA Model",
x = "Date",
y = "Value") +
theme_bw() +
scale_x_date(date_breaks = "12 month", date_labels = "%Y") +
scale_y_continuous(labels = comma) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
fcast_all_df <- fcast_TS_df %>%
left_join(fcast_ETS_df, by = "date") %>%
left_join(fcast_ARIMA_df, by = "date") %>%
left_join(fcast_Prophet_df, by = "date") %>%
left_join(fcast_VA_df, by = "date") %>%
select(
date,
# Linear Regression
TS_mean, TS_lower_95, TS_upper_95,
# ETS
ETS_mean, ETS_lower_95, ETS_upper_95,
# SARIMA
ARIMA_mean, ARIMA_lower_95, ARIMA_upper_95,
# Prophet
Prophet_mean, Prophet_lower_80, Prophet_upper_80,
# Vector Autoregression
VA_mean, VA_lower_95, VA_upper_95
) %>%
tail(1)
forecast_comparison <- data.frame(
Model = c("Time Series (TS)", "ETS", "ARIMA", "Prophet", "Vector Autoregression"),
Mean = c(fcast_all_df$TS_mean, fcast_all_df$ETS_mean, fcast_all_df$ARIMA_mean,
fcast_all_df$Prophet_mean, fcast_all_df$VA_mean),
Lower_CI = c(fcast_all_df$TS_lower_95, fcast_all_df$ETS_lower_95, fcast_all_df$ARIMA_lower_95,
fcast_all_df$Prophet_lower_80, fcast_all_df$VA_lower_95),
Upper_CI = c(fcast_all_df$TS_upper_95, fcast_all_df$ETS_upper_95, fcast_all_df$ARIMA_upper_95,
fcast_all_df$Prophet_upper_80, fcast_all_df$VA_upper_95),
CI_Type = c("95%", "95%", "95%", "80%", "95%")
)
forecast_comparison <- forecast_comparison[order(forecast_comparison$Mean, decreasing = TRUE), ]
forecast_comparison$Mean <- format(round(forecast_comparison$Mean, 1), big.mark = ",")
forecast_comparison$Lower_CI <- format(round(forecast_comparison$Lower_CI, 1), big.mark = ",")
forecast_comparison$Upper_CI <- format(round(forecast_comparison$Upper_CI, 1), big.mark = ",")
knitr::kable(forecast_comparison,
col.names = c("Model", "Mean Forecast", "Lower CI", "Upper CI", "CI Type"))
table_fcast_comparison <- knitr::kable(forecast_comparison,
col.names = c("Model", "Mean Forecast", "Lower CI", "Upper CI", "CI Type"),
row.names = FALSE,
format = "html")
if (!file.exists(        "./6_tables/table_fcast_comparison.html")) {
kableExtra::save_kable("./6_tables/table_fcast_comparison.html",
x = table_fcast_comparison)
print("File successfully saved.")
} else {
print("File already exists in the repository.")
}
# Create the combined visualization
combined_forecast_plot <- ggplot() +
# Actual data line
geom_line(data = fcast_TS_df, aes(x = date, y = actual),
color = "black", size = 1) +
# TS model forecast
geom_line(data = subset(fcast_TS_df, is.na(actual)),
aes(x = date, y = TS_mean, color = "Linear"),
size = 0.8, linetype = "dashed") +
geom_ribbon(data = subset(fcast_TS_df, is.na(actual)),
aes(x = date, ymin = TS_lower_80, ymax = TS_upper_80, fill = "Linear"),
alpha = 0.2) +
# ETS model forecast
geom_line(data = subset(fcast_ETS_df, is.na(actual)),
aes(x = date, y = ETS_mean, color = "ETS"),
size = 0.8, linetype = "dashed") +
geom_ribbon(data = subset(fcast_ETS_df, is.na(actual)),
aes(x = date, ymin = ETS_lower_95, ymax = ETS_upper_95, fill = "ETS"),
alpha = 0.2) +
# ARIMA model forecast
geom_line(data = subset(fcast_ARIMA_df, is.na(actual)),
aes(x = date, y = ARIMA_mean, color = "ARIMA"),
size = 0.8, linetype = "dashed") +
geom_ribbon(data = subset(fcast_ARIMA_df, is.na(actual)),
aes(x = date, ymin = ARIMA_lower_95, ymax = ARIMA_upper_95, fill = "ARIMA"),
alpha = 0.2) +
# Prophet model forecast
geom_line(data = subset(fcast_Prophet_df, is.na(actual)),
aes(x = date, y = Prophet_mean, color = "Prophet"),
size = 0.8, linetype = "dashed") +
geom_ribbon(data = subset(fcast_Prophet_df, is.na(actual)),
aes(x = date, ymin = Prophet_lower_80, ymax = Prophet_upper_80, fill = "Prophet"),
alpha = 0.2) +
# VA model forecast
geom_line(data = subset(fcast_VA_df, is.na(actual)),
aes(x = date, y = VA_mean, color = "VAR"),
size = 0.8, linetype = "dashed") +
geom_ribbon(data = subset(fcast_VA_df, is.na(actual)),
aes(x = date, ymin = VA_lower_95, ymax = VA_upper_95, fill = "VAR"),
alpha = 0.2) +
scale_color_manual(name = "Model",
values = c("Linear" = "red",
"ETS" = "orange3",
"ARIMA" = "blue",
"Prophet" = "green4",
"VAR" = "purple4")) +
scale_fill_manual(name = "Model",
values = c("Linear" = "red",
"ETS" = "orange3",
"ARIMA" = "blue",
"Prophet" = "green3",
"VAR" = "purple4")) +
labs(title = "Comparison of Forecast Models",
x = "Year",
y = "BEV Stock") +
theme_bw() +
scale_x_date(date_breaks = "12 month", date_labels = "%Y") +
scale_y_continuous(labels = scales::comma) +
theme(legend.position = "right",
legend.box = "horizontal",
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_text(face = "bold"))
# Display the plot
combined_forecast_plot
if (!file.exists("./4_plots/combined_forecast_plot.png")) {
ggsave(        "./4_plots/combined_forecast_plot.png",
plot   = combined_forecast_plot,
height = 6,
width  = 8)
print("File successfully saved.")
} else {
print("File already exists in the repository.")
}
# List to store all dataframes
all_forecasts <- list()
# Prepare TS data for binding
ts_data <- fcast_TS_df %>%
select(date, actual, TS_mean, TS_lower_95, TS_upper_95) %>%
rename(mean = TS_mean, lower_95 = TS_lower_95, upper_95 = TS_upper_95) %>%
mutate(model = "Linear")
all_forecasts[[1]] <- ts_data
# Prepare ETS data
ets_data <- fcast_ETS_df %>%
select(date, actual, ETS_mean, ETS_lower_95, ETS_upper_95) %>%
rename(mean = ETS_mean, lower_95 = ETS_lower_95, upper_95 = ETS_upper_95) %>%
mutate(model = "ETS")
all_forecasts[[2]] <- ets_data
# Prepare ARIMA data
arima_data <- fcast_ARIMA_df %>%
select(date, actual, ARIMA_mean, ARIMA_lower_95, ARIMA_upper_95) %>%
rename(mean = ARIMA_mean, lower_95 = ARIMA_lower_95, upper_95 = ARIMA_upper_95) %>%
mutate(model = "ARIMA")
all_forecasts[[3]] <- arima_data
# Prepare Prophet data (using 80% intervals)
prophet_data <- fcast_Prophet_df %>%
select(date, actual, Prophet_mean, Prophet_lower_80, Prophet_upper_80) %>%
rename(mean = Prophet_mean, lower_95 = Prophet_lower_80, upper_95 = Prophet_upper_80) %>%
mutate(model = "Prophet")
all_forecasts[[4]] <- prophet_data
# Prepare VA data
va_data <- fcast_VA_df %>%
select(date, actual, VA_mean, VA_lower_95, VA_upper_95) %>%
rename(mean = VA_mean, lower_95 = VA_lower_95, upper_95 = VA_upper_95) %>%
mutate(model = "VAR")
all_forecasts[[5]] <- va_data
# Combine all dataframes
combined_data <- bind_rows(all_forecasts)
# Create the faceted plot
faceted_forecast_plot <- ggplot(combined_data, aes(x = date)) +
# Actual data line
geom_line(aes(y = actual), color = "black", size = 1) +
# Forecast line and ribbon (only for forecast period)
geom_line(data = subset(combined_data, is.na(actual)),
aes(y = mean), color = "red3", linetype = "dashed", size = 0.8) +
geom_ribbon(data = subset(combined_data, is.na(actual)),
aes(ymin = lower_95, ymax = upper_95), fill = "red3", alpha = 0.2) +
# Facet by model
facet_wrap(~ model, ncol = 3) +
# Labels and theme
labs(title = "Comparison of Forecast Models",
x = "Year",
y = "BEV Stock") +
theme_bw() +
scale_x_date(date_breaks = "24 month", date_labels = "%Y") +
scale_y_continuous(labels = scales::comma) +
theme(
strip.background = element_rect(fill = "gray90"),
strip.text = element_text(face = "bold", size = 11),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.spacing = unit(0.5, "lines")
)
# Display the plot
faceted_forecast_plot
if (!file.exists("./4_plots/faceted_forecast_plot.png")) {
ggsave(        "./4_plots/faceted_forecast_plot.png",
plot   = faceted_forecast_plot,
height = 6,
width  = 8)
print("File successfully saved.")
} else {
print("File already exists in the repository.")
}
combined_forecast_plot
ggsave(        "./4_plots/combined_forecast_plot.png",
plot   = combined_forecast_plot,
height = 6,
width  = 8)
# Display the plot
faceted_forecast_plot
kableExtra::save_kable("./6_tables/table_fcast_comparison.html",
x = table_fcast_comparison)
