RColorBrewer, # Additional color palettes for plots
gridExtra,    # Arrange multiple grid-based plots on a page
# String Manipulation
stringr,      # Simple and consistent string manipulation functions
stringi,      # Advanced string manipulation with Unicode support
# Date-Time Handling
lubridate,    # Simplify date and time parsing and manipulation
# Geographic and Spatial Data
geobr,        # Access Brazilian geographic data (e.g., shapefiles)
deflateBR,    # Deflate nominal Brazilian Reais using price indexes
sf,           # Handle spatial/geographic data in R
# Reporting and Tables
gt,           # Create publication-quality tables
stargazer,    # Generate regression tables in LaTeX/HTML/text formats
# Machine Learning and Statistics
caret,        # Comprehensive machine learning framework
Metrics,      # Evaluate model performance (RMSE, MAE, etc.)
glmnet,       # Regularized generalized linear models (Lasso, Ridge)
earth,        # Multivariate Adaptive Regression Splines
vip,          # Variable Importance Plots
pdp,          # Partial Dependence Plots
car,          # Companion to Applied Regression (diagnostic functions)
DescTools,    # Tools for descriptive statistics
rsample,      # Functions for resampling data
# Econometrics and Time Series Analysis
plm,          # Panel data analysis (fixed/random effects models)
urca,         # Unit root and cointegration tests for time series
forecast,     # Time series forecasting functions and models
forcats,
astsa,
xts
)
fit_2 <- stl(single_ts, s.window = "periodic")
fit_2 <- stl(electric_ts, s.window = "periodic")
autoplot(fit)
library(ggfortify)
autoplot(fit_2)
pacman::p_load(
# Core Data Manipulation and Tidying
dplyr,        # Data manipulation: filter, summarize, mutate, and more
tidyr,        # Data tidying: pivot, handle missing values, reshape
janitor,      # Clean messy data and create summary tables
# Data Import and Export
readr,        # Read flat files (CSV, TSV) into tibbles
readxl,       # Read Excel files (.xls, .xlsx) into data frames
basedosdados, # Access Brazilian public data via BigQuery
httr,         # Perform HTTP requests for web API interactions
archive,      # Extract files from compressed archives (.zip, .tar.gz)
# Data Visualization
ggplot2,      # Create customizable visualizations with grammar of graphics
scales,       # Format axes and legends (percentages, currencies)
viridis,      # Colorblind-friendly color palettes
RColorBrewer, # Additional color palettes for plots
gridExtra,    # Arrange multiple grid-based plots on a page
# String Manipulation
stringr,      # Simple and consistent string manipulation functions
stringi,      # Advanced string manipulation with Unicode support
# Date-Time Handling
lubridate,    # Simplify date and time parsing and manipulation
# Geographic and Spatial Data
geobr,        # Access Brazilian geographic data (e.g., shapefiles)
deflateBR,    # Deflate nominal Brazilian Reais using price indexes
sf,           # Handle spatial/geographic data in R
# Reporting and Tables
gt,           # Create publication-quality tables
stargazer,    # Generate regression tables in LaTeX/HTML/text formats
# Machine Learning and Statistics
caret,        # Comprehensive machine learning framework
Metrics,      # Evaluate model performance (RMSE, MAE, etc.)
glmnet,       # Regularized generalized linear models (Lasso, Ridge)
earth,        # Multivariate Adaptive Regression Splines
vip,          # Variable Importance Plots
pdp,          # Partial Dependence Plots
car,          # Companion to Applied Regression (diagnostic functions)
DescTools,    # Tools for descriptive statistics
rsample,      # Functions for resampling data
# Econometrics and Time Series Analysis
plm,          # Panel data analysis (fixed/random effects models)
urca,         # Unit root and cointegration tests for time series
forecast,     # Time series forecasting functions and models
forcats,
astsa,
xts,
ggfortify
)
autoplot(fit_2)
autoplot(fit_2)
fit_2
fleet_2013_2024 <- read_csv("1_raw_data/2_vehicle_fleet/frota_2013_2024.csv")
setwd("C:/Users/joaov/Dropbox/R Assignments/master-thesis")
source("./2_code/00_packages.R")
fleet_2013_2024 <- read_csv("1_raw_data/2_vehicle_fleet/frota_2013_2024.csv")
fleet_2013_2024 <- read_csv("1_raw_data/2_vehicle_fleet/frota_2013_2024.csv")
fleet_2013_2024_clean_id <- read_csv("1_raw_data/2_vehicle_fleet/frota_2013_2024_clean_id.csv")
View(fleet_2013_2024)
source("C:/Users/joaov/Dropbox/R Assignments/master-thesis/2_code/04_time_series.R", echo=TRUE)
autoplot(multivariate_ts[,'log_electric'], series="Data") +
autolayer(fitted(ts_model_3), series="Fitted") +
xlab("Year/Month") + ylab("BEV Stock (log transformed)") +
guides(colour=guide_legend(title=" "))
# Convert to a multivariate time series object
multivariate_ts <- ts(
fleet_df_ts,
start = c(start_year, start_month),
frequency = 12
)
fcast <- forecast(ts_model_exp, h=h)
h = 90
fcast <- forecast(ts_model_exp, h=h)
autoplot(fcast)
autoplot(multivariate_ts[,'log_electric'], series="Data") +
autolayer(fitted(ts_model_3), series="Fitted") +
xlab("Year/Month") + ylab("BEV Stock (log transformed)") +
guides(colour=guide_legend(title=" "))
View(multivariate_ts)
fit <- lm(electric_ts ~time(electric_ts), na.action=NULL) # regress chicken on time
par(mfrow=c(2,1))
plot(resid(fit), type="o", main="detrended")
plot(diff(electric_ts), type="o", main="first difference")
par(mfrow=c(3,1)) # plot ACFs
acf(electric_ts, 48, main="BEVs")
acf(resid(fit), 48, main="Detrended")
acf(diff(electric_ts), 48, main="First difference")
single_ts <- fleet_df_ts %>%
select(date, electric)
ts(start = c(start_year, start_month),frequency = 12)
electric_ts <- ts(single_ts$electric, start = c(2013, 5), frequency = 12)
par(mfrow=c(2,1))
plot(resid(fit), type="o", main="detrended")
plot(diff(electric_ts), type="o", main="first difference")
?acf
autoplot(fit_2)
electric_ts %>% decompose(type="multiplicative") %>%
autoplot() +
xlab("Year") +
ggtitle("Classical multiplicative decomposition of Brazil's BEV stock")
library(seasonal)
pacman::p_load(
# Core Data Manipulation and Tidying
dplyr,        # Data manipulation: filter, summarize, mutate, and more
tidyr,        # Data tidying: pivot, handle missing values, reshape
janitor,      # Clean messy data and create summary tables
# Data Import and Export
readr,        # Read flat files (CSV, TSV) into tibbles
readxl,       # Read Excel files (.xls, .xlsx) into data frames
basedosdados, # Access Brazilian public data via BigQuery
httr,         # Perform HTTP requests for web API interactions
archive,      # Extract files from compressed archives (.zip, .tar.gz)
# Data Visualization
ggplot2,      # Create customizable visualizations with grammar of graphics
scales,       # Format axes and legends (percentages, currencies)
viridis,      # Colorblind-friendly color palettes
RColorBrewer, # Additional color palettes for plots
gridExtra,    # Arrange multiple grid-based plots on a page
# String Manipulation
stringr,      # Simple and consistent string manipulation functions
stringi,      # Advanced string manipulation with Unicode support
# Date-Time Handling
lubridate,    # Simplify date and time parsing and manipulation
# Geographic and Spatial Data
geobr,        # Access Brazilian geographic data (e.g., shapefiles)
deflateBR,    # Deflate nominal Brazilian Reais using price indexes
sf,           # Handle spatial/geographic data in R
# Reporting and Tables
gt,           # Create publication-quality tables
stargazer,    # Generate regression tables in LaTeX/HTML/text formats
# Machine Learning and Statistics
caret,        # Comprehensive machine learning framework
Metrics,      # Evaluate model performance (RMSE, MAE, etc.)
glmnet,       # Regularized generalized linear models (Lasso, Ridge)
earth,        # Multivariate Adaptive Regression Splines
vip,          # Variable Importance Plots
pdp,          # Partial Dependence Plots
car,          # Companion to Applied Regression (diagnostic functions)
DescTools,    # Tools for descriptive statistics
rsample,      # Functions for resampling data
# Econometrics and Time Series Analysis
plm,          # Panel data analysis (fixed/random effects models)
urca,         # Unit root and cointegration tests for time series
forecast,     # Time series forecasting functions and models
forcats,
astsa,
xts,
ggfortify,
seasonal
)
autoplot(fit) +
ggtitle("X11 decomposition of Brazil's BEV stock")
autoplot(fit_3) +
ggtitle("X11 decomposition of Brazil's BEV stock")
electric_ts %>% seas(x11="") -> fit_3
fit_3 <- electric_ts %>% seas(x11="")
autoplot(fit_3) +
ggtitle("X11 decomposition of Brazil's BEV stock")
summary(ts_model_3)
summary(ts_model_3, ts_model_exp)
summary(ts_model_1, ts_model_2, ts_model_3)
stargazer(ts_model_1, ts_model_2, ts_model_3)
stargazer(ts_model_1, ts_model_2, ts_model_3)
options(scipen = 999)
summary(ts_model_1)
summary(ts_model_3)
summary(ts_model_exp)
remotes::install_github("business-science/timetk")
remotes::install_github("business-science/timetk")
checkresiduals(ts_model_3)
checkresiduals(ts_model_exp)
fcast <- forecast(ts_model_3, h=h)
fcast <- forecast(ts_model_exp, h=h)
fcast <- forecast(ts_model_exp, h=h)
fcast <- forecast(ts_model_3, h=h)
autoplot(fcast)
## 2.1. Data from project pipeline ---------------------------------------------
fleet_2013_2024_clean <- read_csv("./3_processed_data/fleet_2013_2024_id_clean.csv")
price_df <- read_csv("3_processed_data/fipe_price_monthly_trends_deflated.csv")
income_data_wide_uf <- read_csv("3_processed_data/income_data_wide_uf.csv")
# 3. Models --------------------------------------------------------------------
## Preparing data --------------------------------------------------------------
### a) Fleet size and population -----------------------------------------------
months <- fleet_2013_2024_clean %>%
arrange(date) %>%
distinct(date) %>%
mutate(months_nr = row_number())
fleet_df <- fleet_2013_2024_clean %>%
mutate(ev_pc        = electric / populacao,
ff_pc        = (gasoline+diesel)/populacao,
log_electric = log(electric),
log_ff       = log(gasoline+diesel),
log_pop      = log(populacao)) %>%
filter(log_electric >= 0) %>%
left_join(months, by="date")
### b) Price information -------------------------------------------------------
fleet_df_b_city <- fleet_df %>%
left_join(price_df, by = "date")
fleet_df_b_uf <- fleet_df %>%
left_join(price_df, by = "date") %>%
group_by(sigla_uf, date, months_nr) %>%
summarize(diesel     = sum(diesel),
ethanol    = sum(ethanol),
gasoline   = sum(gasoline),
other      = sum(other),
electric   = sum(electric),
gas        = sum(gas),
population = sum(populacao))
fleet_df_b_uf <- fleet_df %>%
left_join(price_df, by = "date") %>%
group_by(sigla_uf, date, year, month, months_nr) %>%
summarize(diesel     = sum(diesel),
ethanol    = sum(ethanol),
gasoline   = sum(gasoline),
other      = sum(other),
electric   = sum(electric),
gas        = sum(gas),
population = sum(populacao),
mean_gas   = mean(mean_price_gasoline),
mean_hyb   = mean(mean_price_hybrid),
mean_ev    = mean(mean_price_electric),
median_gas = mean(median_price_gasoline),
median_hyb = mean(median_price_hybrid),
median_ev  = mean(median_price_electric),
min_gas    = mean(min_price_gasoline),
min_hyb    = mean(min_price_hybrid),
min_ev     = mean(min_price_electric)) %>%
mutate(ff_pc        = (gasoline+diesel)/population,
log_ff       = log(gasoline+diesel),
log_pop      = log(population))
### c) Income information ------------------------------------------------------
fleet_df_c <- fleet_df_b_uf %>%
left_join(income_data_wide_uf, by = c("year", "sigla_uf")) %>%
drop_na()
head(fleet_df_c, 15)
## 3.1. Supervised Learning ----------------------------------------------------
### 3.1.1. Simple Linear Regression --------------------------------------------
model1 <- lm(log_electric ~ months_nr, data = fleet_df)
stargazer(model1, type = "text",
title="Linear Regression Results: Model 1", single.row=TRUE)
stargazer(model1, type = "html",
title="Linear Regression Results: Model 1", single.row=TRUE,
out = "./5_analysis/1_regression_tables/lm_model1.html")
model2 <- lm(log_electric ~ log_pop * months_nr, data = fleet_df)
stargazer(model2, type = "text",
title="Linear Regression Results: Model 2", single.row=TRUE)
stargazer(model2, type = "html",
title="Linear Regression Results: Model 2", single.row=TRUE,
out = "./5_analysis/1_regression_tables/lm_model2.html")
model3 <- lm(log_electric ~ log_pop * months_nr + mean_ev + mean_gas + mean_hyb,
data = fleet_df_b_uf)
summary(ts_model_1)
summary(ts_model_1)
summary(ts_model_2)
checkresiduals(ts_model_3)
summary(ts_model_3)
autoplot(multivariate_ts[,'log_electric'], series="Data") +
autolayer(fitted(ts_model_3), series="Fitted") +
xlab("Year/Month") + ylab("BEV Stock (log transformed)") +
guides(colour=guide_legend(title=" "))
h = 90
fcast <- forecast(ts_model_3, h=h)
autoplot(fcast)
autoplot(fcast)
source("./2_code/00_packages.R")
autoplot(fcast)
autoplot(multivariate_ts[,'log_electric'], series="Data") +
autolayer(fitted(ts_model_3), series="Fitted") +
xlab("Year/Month") + ylab("BEV Stock (log transformed)") +
guides(colour=guide_legend(title=" "))
autoplot(multivariate_ts[,'log_electric'], series="Data") +
autolayer(fitted(ts_model_3), series="Fitted")
autoplot(multivariate_ts[,'log_electric'], series="Data")
autoplot(multivariate_ts[,'log_electric'], series="Data") +
autolayer(fitted(ts_model_3), series="Fitted")
ts_model_3
?fitted
fitted(ts_model_3)
autoplot(multivariate_ts[,'log_electric'], series="Data") +
autolayer(fitted(ts_model_3))
multivariate_ts %>%
as.data.frame() %>%
GGally::ggpairs()
View(multivariate_ts)
multivariate_ts %>%
select(log_electric:log_avg_taxable_income_100) %>%
as.data.frame() %>%
GGally::ggpairs()
multivariate_ts %>%
as.data.frame() %>%
select(log_electric:log_avg_taxable_income_100) %>%
GGally::ggpairs()
multivariate_ts %>%
as.data.frame() %>%
select(log_electric:log_avg_taxable_income_100) %>%
?rename(
)
?rename
multivariate_ts %>%
as.data.frame() %>%
select(log_electric:log_avg_taxable_income_100) %>%
rename(
log_electric ~
log_population = Population,
multivariate_ts %>%
as.data.frame() %>%
select(log_electric:log_avg_taxable_income_100) %>%
rename(
log_electric   = `BEV Stock`,
log_population = Population,
log_min_ev     = `BEV prices`,
log_mean_gas   = `ICE (Gasoline) prices`,
log_mean_hyb   = `ICE (Hybrid) prices`,
log_avg_taxable_income_50  = `Avg. Income (50th perc.)`,
log_avg_taxable_income_100 = `Avg. Income (100th perc.)`
) %>%
GGally::ggpairs()
multivariate_ts %>%
as.data.frame() %>%
select(log_electric:log_avg_taxable_income_100) %>%
rename(
`BEV Stock`  = log_electric,
Population   = log_population,
`BEV prices` = log_min_ev,
`Avg. ICE (Gas.) prices` = log_mean_gas,
`Avg. ICE (Hyb.) prices` = log_mean_hyb,
`Avg. Income (50th perc.)` = log_avg_taxable_income_50,
`Avg. Income (100th perc.)`= log_avg_taxable_income_100
) %>%
GGally::ggpairs()
multivariate_ts %>%
as.data.frame() %>%
select(log_electric:log_avg_taxable_income_100) %>%
rename(
`BEV Stock`  = log_electric,
Population   = log_population,
`BEV prices` = log_min_ev,
`Avg. ICEV (Gasoline) prices` = log_mean_gas,
`Avg. ICEV (Hybrid) prices` = log_mean_hyb,
`Avg. Income (50th perc.)` = log_avg_taxable_income_50,
`Avg. Income (100th perc.)`= log_avg_taxable_income_100
) %>%
GGally::ggpairs()
plot_correlatinon <- multivariate_ts %>%
as.data.frame() %>%
select(log_electric:log_avg_taxable_income_100) %>%
rename(
`BEV Stock`  = log_electric,
Population   = log_population,
`BEV prices` = log_min_ev,
`Avg. ICEV (Gasoline) prices` = log_mean_gas,
`Avg. ICEV (Hybrid) prices` = log_mean_hyb,
`Avg. Income (50th perc.)` = log_avg_taxable_income_50,
`Avg. Income (100th perc.)`= log_avg_taxable_income_100
) %>%
GGally::ggpairs()
plot_correlation
plot_correlation <- multivariate_ts %>%
as.data.frame() %>%
select(log_electric:log_avg_taxable_income_100) %>%
rename(
`BEV Stock`  = log_electric,
Population   = log_population,
`BEV prices` = log_min_ev,
`Avg. ICEV (Gasoline) prices` = log_mean_gas,
`Avg. ICEV (Hybrid) prices` = log_mean_hyb,
`Avg. Income (50th perc.)` = log_avg_taxable_income_50,
`Avg. Income (100th perc.)`= log_avg_taxable_income_100
) %>%
GGally::ggpairs()
plot_correlation
?ggsave
ggsave(
filename = "./4_plots/correlation_plot.png",
plot     = plot_correlation,
width    = 10
height   = 10)
ggsave(
filename = "./4_plots/correlation_plot.png",
plot     = plot_correlation,
width    = 10,
height   = 10)
ggsave(
filename = "./4_plots/correlation_plot.png",
plot     = plot_correlation,
width    = 14,
height   = 10)
ggsave(
filename = "./4_plots/correlation_plot.png",
plot     = plot_correlation,
width    = 10,
height   = 7)
plot_correlation <- multivariate_ts %>%
as.data.frame() %>%
select(log_electric:log_avg_taxable_income_100) %>%
rename(
`BEV Stock`  = log_electric,
Population   = log_population,
`BEV prices` = log_min_ev,
`ICEV (Gasoline) prices` = log_mean_gas,
`ICEV (Hybrid) prices` = log_mean_hyb,
`Income (50th perc.)` = log_avg_taxable_income_50,
`Income (100th perc.)`= log_avg_taxable_income_100
) %>%
GGally::ggpairs()
ggsave(
filename = "./4_plots/correlation_plot.png",
plot     = plot_correlation,
width    = 10,
height   = 7)
plot_correlation <- multivariate_ts %>%
as.data.frame() %>%
select(log_electric:log_avg_taxable_income_100) %>%
rename(
`BEV Stock`  = log_electric,
Population   = log_population,
`BEV prices` = log_min_ev,
`ICEV (Gasol.) prices` = log_mean_gas,
`ICEV (Hybrid) prices` = log_mean_hyb,
`Income (50th perc.)` = log_avg_taxable_income_50,
`Income (100th perc.)`= log_avg_taxable_income_100
) %>%
GGally::ggpairs()
ggsave(
filename = "./4_plots/correlation_plot.png",
plot     = plot_correlation,
width    = 10,
height   = 7)
plot_correlation <- multivariate_ts %>%
as.data.frame() %>%
select(log_electric:log_avg_taxable_income_100) %>%
rename(
`BEV Stock`  = log_electric,
Population   = log_population,
`BEV prices` = log_min_ev,
`ICEV (Gasol.) prices` = log_mean_gas,
`ICEV (Hybrid) prices` = log_mean_hyb,
`Income (50th)` = log_avg_taxable_income_50,
`Income (100th)`= log_avg_taxable_income_100
) %>%
GGally::ggpairs()
ggsave(
filename = "./4_plots/correlation_plot.png",
plot     = plot_correlation,
width    = 10,
height   = 7)
ggsave(
filename = "./4_plots/correlation_plot.png",
plot     = plot_correlation,
width    = 7,
height   = 5)
ggsave(
filename = "./4_plots/correlation_plot.png",
plot     = plot_correlation,
width    = 8,
height   = 5)
ggsave(
filename = "./4_plots/correlation_plot.png",
plot     = plot_correlation,
width    = 9,
height   = 5)
ggsave(
filename = "./4_plots/correlation_plot.png",
plot     = plot_correlation,
width    = 11,
height   = 5)
ggsave(
filename = "./4_plots/correlation_plot.png",
plot     = plot_correlation,
width    = 9,
height   = 6)
ggsave(
filename = "./4_plots/correlation_plot.png",
plot     = plot_correlation,
width    = 10,
height   = 6)
