geom_point(size = 1) +
scale_x_date(date_labels = "%Y", date_breaks = "1 years") +
theme(axis.title.y = element_blank(),
panel.grid.minor = element_line(color = "white"),
panel.grid.major = element_line(color = "white")) +
labs(title = "", x = "")
# Create the ACF plot
p2 <- ACF(res, .resid) %>%
autoplot() +
labs(title = "")
# Create the histogram
p3 <- ggplot(res, aes(x = .resid)) +
geom_histogram(bins = 30, aes(y = ..density..), fill = "grey1", alpha = 0.7) +
geom_density(color = "orangered", size = 0.5) +
labs(title = "", x = "")
# Arrange the plots
(p1 / (p2 + p3)) + plot_layout(heights = c(1, 1))
p1 <- res %>%
ggplot(aes(x = as.Date(index), y = .resid)) +
geom_line() +
geom_point(size = 0.8) +
scale_x_date(date_labels = "%Y", date_breaks = "1 years") +
theme(axis.title.y = element_blank(),
panel.grid.minor = element_line(color = "white"),
panel.grid.major = element_line(color = "white")) +
labs(title = "", x = "")
# Create the ACF plot
p2 <- ACF(res, .resid) %>%
autoplot() +
labs(title = "")
# Create the histogram
p3 <- ggplot(res, aes(x = .resid)) +
geom_histogram(bins = 30, aes(y = ..density..), fill = "grey1", alpha = 0.7) +
geom_density(color = "orangered", size = 0.5) +
labs(title = "", x = "")
# Arrange the plots
(p1 / (p2 + p3)) + plot_layout(heights = c(1, 1))
p1 <- res %>%
ggplot(aes(x = as.Date(index), y = .resid)) +
geom_line() +
geom_point(size = 0.5) +
scale_x_date(date_labels = "%Y", date_breaks = "1 years") +
theme(axis.title.y = element_blank(),
panel.grid.minor = element_line(color = "white"),
panel.grid.major = element_line(color = "white")) +
labs(title = "", x = "")
# Create the ACF plot
p2 <- ACF(res, .resid) %>%
autoplot() +
labs(title = "")
# Create the histogram
p3 <- ggplot(res, aes(x = .resid)) +
geom_histogram(bins = 30, aes(y = ..density..), fill = "grey1", alpha = 0.7) +
geom_density(color = "orangered", size = 0.5) +
labs(title = "", x = "")
# Arrange the plots
(p1 / (p2 + p3)) + plot_layout(heights = c(1, 1))
p1 <- res %>%
ggplot(aes(x = as.Date(index), y = .resid)) +
geom_line() +
geom_point(size = 0.7) +
scale_x_date(date_labels = "%Y", date_breaks = "1 years") +
theme(axis.title.y = element_blank(),
panel.grid.minor = element_line(color = "white"),
panel.grid.major = element_line(color = "white")) +
labs(title = "", x = "")
# Create the ACF plot
p2 <- ACF(res, .resid) %>%
autoplot() +
labs(title = "")
# Create the histogram
p3 <- ggplot(res, aes(x = .resid)) +
geom_histogram(bins = 30, aes(y = ..density..), fill = "grey1", alpha = 0.7) +
geom_density(color = "orangered", size = 0.5) +
labs(title = "", x = "")
# Arrange the plots
(p1 / (p2 + p3)) + plot_layout(heights = c(1, 1))
# Create the ACF plot
p2 <- ACF(res, .resid) %>%
autoplot() +
labs(title = "", y = "ACF", x = "Lag")
p1 <- res %>%
ggplot(aes(x = as.Date(index), y = .resid)) +
geom_line() +
geom_point(size = 0.7) +
scale_x_date(date_labels = "%Y", date_breaks = "1 years") +
theme(axis.title.y = element_blank(),
panel.grid.minor = element_line(color = "white"),
panel.grid.major = element_line(color = "white")) +
labs(title = "", x = "")
# Create the ACF plot
p2 <- ACF(res, .resid) %>%
autoplot() +
labs(title = "", y = "ACF", x = "Lag")
# Create the histogram
p3 <- ggplot(res, aes(x = .resid)) +
geom_histogram(bins = 30, aes(y = ..density..), fill = "grey1", alpha = 0.7) +
geom_density(color = "orangered", size = 0.5) +
labs(title = "", y = "df$y")
# Arrange the plots
(p1 / (p2 + p3)) + plot_layout(heights = c(1, 1))
res <- residuals(fit_Prophet_fpp3)
# Create the time plot with no y-axis label
p1 <- res %>%
ggplot(aes(x = as.Date(index), y = .resid)) +
geom_line() +
geom_point(size = 0.7) +
scale_x_date(date_labels = "%Y", date_breaks = "1 years") +
theme(axis.title.y = element_blank(),
panel.grid.minor = element_line(color = "white"),
panel.grid.major = element_line(color = "white")) +
labs(title = "", x = "")
# Create the ACF plot
p2 <- ACF(res, .resid) %>%
autoplot() +
labs(title = "", y = "ACF", x = "Lag")
# Create the histogram
p3 <- ggplot(res, aes(x = .resid)) +
geom_histogram(bins = 30, aes(y = ..density..), fill = "grey1", alpha = 0.7) +
geom_density(color = "orangered", size = 0.5) +
labs(title = "", y = "df$y", x = "")
# Arrange the plots
(p1 / (p2 + p3)) + plot_layout(heights = c(1, 1))
CV(ts_model_1)
CV(fcast_VA_selected_BEV)
source("./2_code/Pipeline/07_combined_data.R")
pacman::p_load(
# Core Data Manipulation and Tidying
dplyr,        # Data manipulation: filter, summarize, mutate, and more
tidyr,        # Data tidying: pivot, handle missing values, reshape
janitor,      # Clean messy data and create summary tables
forcats,      # Handle categorical variables (factors)
# Data Import and Export
readr,        # Read flat files (CSV, TSV) into tibbles
readxl,       # Read Excel files (.xls, .xlsx) into data frames
basedosdados, # Access Brazilian public data via BigQuery
httr,         # Perform HTTP requests for web API interactions
archive,      # Extract files from compressed archives (.zip, .tar.gz)
# Data Visualization
ggplot2,      # Create customizable visualizations with grammar of graphics
scales,       # Format axes and legends (percentages, currencies)
viridis,      # Colorblind-friendly color palettes
RColorBrewer, # Additional color palettes for plots
gridExtra,    # Arrange multiple grid-based plots on a page
ggfortify,    # Unified plotting interface for stats objects
grid,         # Low-level graphics system
# String Manipulation
stringr,      # Simple and consistent string manipulation functions
stringi,      # Advanced string manipulation with Unicode support
# Date-Time Handling
lubridate,    # Simplify date and time parsing and manipulation
# Geographic and Spatial Data
geobr,        # Access Brazilian geographic data (e.g., shapefiles)
deflateBR,    # Deflate nominal Brazilian Reais using price indexes
sf,           # Handle spatial/geographic data in R
# Reporting and Tables
gt,           # Create publication-quality tables
stargazer,    # Generate regression tables in LaTeX/HTML/text formats
# Machine Learning and Statistics
caret,        # Comprehensive machine learning framework
Metrics,      # Evaluate model performance (RMSE, MAE, etc.)
glmnet,       # Regularized generalized linear models (Lasso, Ridge)
earth,        # Multivariate Adaptive Regression Splines
vip,          # Variable Importance Plots
pdp,          # Partial Dependence Plots
car,          # Companion to Applied Regression (diagnostic functions)
DescTools,    # Tools for descriptive statistics
rsample,      # Functions for resampling data
# Time Series Analysis
plm,          # Panel data analysis (fixed/random effects models)
forecast,     # Time series forecasting functions and models
astsa,        # Applied statistical time series analysis
xts,          # Extensible time series class and methods
seasonal,     # Seasonal adjustment of time series
urca,         # Unit root and cointegration tests
fable,        # Modern time series modeling framework
tsibble,      # Tidy temporal data structures
prophet,      # Forecasting procedure for time series
vars,
conflicted,
fable.prophet,
fable,
tsibbledata
)
CV(fcast_VA_selected_BEV)
# 2. Loading data from the pipeline --------------------------------------------
source("./2_code/Pipeline/07_combined_data.R")
# 3. Linear Regressions (Fixed Effects) ----------------------------------------
# Function to log-transform null values and return small constant
safe_log <- function(x) {
ifelse(x > 0,
log(x),
ifelse(x == 0,
log(0.01),  # Small constant for zeros
-log(abs(x) + 1)))  # For negative values
}
# Transforming variables in the dataframe
df_combined_state_transformed <- df_combined_state %>%
mutate(across(c(electric, population, PHEV, gasoline, ethanol,
min_ev, mean_gas, mean_hyb,
avg_taxable_income_50, avg_taxable_income_100),
~ safe_log(.x),
.names = "log_{.col}"))
# Running fixed-effects models
fe_model_1 <- plm(log_electric ~
log_population,
data = df_combined_state_transformed,
model = "within",
index = c("sigla_uf", "date"))
fe_model_2 <- plm(log_electric ~
log_population +
log_PHEV + log_gasoline + log_ethanol,
data = df_combined_state_transformed,
model = "within",
index = c("sigla_uf", "date"))
fe_model_3 <- plm(log_electric ~
log_population +
log_PHEV + log_gasoline + log_ethanol +
log_min_ev + log_mean_gas + log_mean_hyb,
data = df_combined_state_transformed,
model = "within",
index = c("sigla_uf", "date"))
fe_model_4 <- plm(log_electric ~
log_population +
log_PHEV + log_gasoline + log_ethanol +
log_min_ev + log_mean_gas + log_mean_hyb +
log_avg_taxable_income_50 + log_avg_taxable_income_100,
data = df_combined_state_transformed,
model = "within",
index = c("sigla_uf", "date"))
stargazer(fe_model_1, fe_model_2, fe_model_3, fe_model_4, type = "html",
title = "BEV stock regressed on population size, time, vehicle prices and income with panel data and fixed effects",
single.row = FALSE,
dep.var.labels = c("BEV stock (log)"),
column.labels = c("Model 1", "Model 2", "Model 3", "Model 4"),
keep.stat = c("rsq", "f"),
notes.align = "l",
omit = "as.factor\\(months_nr\\)[0-9]+",
intercept.bottom = TRUE,
covariate.labels=c("Population",
"PHEV Stock",
"ICE Stock - Gasoline",
"ICE Stock - Ethanol",
"Vehicle price - BEV",
"Vehicle price - ICE (log)",
"Vehicle price - ICE (log)",
"Avg. Income - 50th perc. (log)",
"Avg. Income - 100th perc. (log)",
out = "./5_analysis/1_regression_tables/fe_model.html"))
# 4. Linear Regressions (Time Series) ------------------------------------------
fleet_df_ts <- df_combined_state %>%
ungroup() %>%
select(sigla_uf, date, year, month,
diesel, ethanol, gasoline, electric, PHEV,
population,
mean_ev, mean_gas, mean_hyb,
avg_taxable_income_50, avg_taxable_income_100) %>%
group_by(date) %>%
summarize(
electric                = sum(electric),
population              = sum(population),
mean_ev                 = mean(mean_ev),
mean_gas                = mean(mean_gas),
mean_hyb                = mean(mean_hyb),
avg_taxable_income_50   = mean(avg_taxable_income_50),
avg_taxable_income_100  = mean(avg_taxable_income_100),
log_electric            = log(electric),
log_population          = log(population),
log_mean_ev             = log(mean_ev),
log_mean_gas            = log(mean_gas),
log_mean_hyb            = log(mean_hyb),
log_avg_taxable_income_50  = log(avg_taxable_income_50),
log_avg_taxable_income_100 = log(avg_taxable_income_100)
) %>%
mutate(
electric   = if_else(date == as.Date("2018-06-01"), electric   / 2, electric),
population = if_else(date == as.Date("2018-06-01"), population / 2, population)
)
fleet_df_ts <- fleet_df_ts %>% arrange(date)
# Extract start year and month
start_year <- as.numeric(format(min(fleet_df_ts$date), "%Y"))
start_month <- as.numeric(format(min(fleet_df_ts$date), "%m"))
# Convert to a multivariate time series object
multivariate_ts <- ts(
fleet_df_ts,
start = c(start_year, start_month),
frequency = 12
)
### Time Series Models
ts_model_1 <- tslm(log_electric ~
log_population,
data = multivariate_ts)
ts_model_2 <- tslm(log_electric ~
log_population *
log_mean_ev +
log_mean_gas +
log_mean_hyb,
data = multivariate_ts)
ts_model_3 <- tslm(log_electric ~
log_population *
log_mean_ev +
log_mean_gas +
log_mean_hyb +
log_avg_taxable_income_50 +
log_avg_taxable_income_100,
data = multivariate_ts)
options(scipen = 999)
summary(ts_model_1)
summary(ts_model_2)
summary(ts_model_3)
CV(fe_model_4)
CV(ts_model)
CV(ts_model_3)
CV(fe_model_4)
CV(ts_model_3)
multivariate_ts
View(multivariate_ts)
plot_correlation <- multivariate_ts %>%
as.data.frame() %>%
select(log_electric:log_avg_taxable_income_100) %>%
rename(
`BEV Stock`  = log_electric,
Population   = log_population,
`BEV prices` = log_min_ev,
`ICEV (Gasol.) prices` = log_mean_gas,
`ICEV (Hybrid) prices` = log_mean_hyb,
`Income (50th)` = log_avg_taxable_income_50,
`Income (100th)`= log_avg_taxable_income_100
) %>%
GGally::ggpairs()
plot_correlation <- multivariate_ts %>%
as.data.frame() %>%
select(log_electric:log_avg_taxable_income_100) %>%
rename(
`BEV Stock`  = log_electric,
Population   = log_population,
`ICEV (Gasol.) prices` = log_mean_gas,
`ICEV (Hybrid) prices` = log_mean_hyb,
`Income (50th)` = log_avg_taxable_income_50,
`Income (100th)`= log_avg_taxable_income_100
) %>%
GGally::ggpairs()
plot_correlation
multivariate_ts[,4:11]
plot_correlation <- multivariate_ts[,4:11] %>%
as.data.frame() %>%
select(log_electric:log_avg_taxable_income_100) %>%
rename(
`BEV Stock`  = log_electric,
Population   = log_population,
`ICEV (Gasol.) prices` = log_mean_gas,
`ICEV (Hybrid) prices` = log_mean_hyb,
`Income (50th)` = log_avg_taxable_income_50,
`Income (100th)`= log_avg_taxable_income_100
) %>%
GGally::ggpairs()
multivariate_ts_df <- multivariate_ts[,4:11] %>%
as.data.frame()
multivariate_ts[,4:11]
source("./2_code/Pipeline/07_combined_data.R")
source("C:/Users/joaov/Dropbox/R Assignments/master-thesis/2_code/Pipeline/09e_forecasting_VA.R", echo=TRUE)
multivariate_ts_df <- multivariate_ts[,4:11] %>%
as.data.frame()
multivariate_ts_df <- multivariate_ts[,4:14] %>%
as.data.frame()
plot_correlation <- multivariate_ts_df
plot_correlation
plot_correlation <- multivariate_ts_df
select(Diesel, Ethanol, Gasoline, BEV, PHEV, Population:avg_taxable_income_100) %>%
rename(
`ICEV (Diesel)` = Diesel,
`ICEV (Ethanol)` = Ethanol,
`ICEV (Gasoline)` = Gasoline,
`Income (50th)` = log_avg_taxable_income_50,
`Income (90th)` = log_avg_taxable_income_90,
`Income (100th)`= log_avg_taxable_income_100
) %>%
GGally::ggpairs()
multivariate_ts_df <- multivariate_ts[,4:14] %>%
as.data.frame()
plot_correlation <- multivariate_ts_df
multivariate_ts_df <- multivariate_ts[,4:14] %>%
as.data.frame()
plot_correlation <- multivariate_ts_df %>%
select(Diesel, Ethanol, Gasoline, BEV, PHEV, Population:avg_taxable_income_100) %>%
rename(
`ICEV (Diesel)` = Diesel,
`ICEV (Ethanol)` = Ethanol,
`ICEV (Gasoline)` = Gasoline,
`Income (50th)` = log_avg_taxable_income_50,
`Income (90th)` = log_avg_taxable_income_90,
`Income (100th)`= log_avg_taxable_income_100
) %>%
GGally::ggpairs()
plot_correlation <- multivariate_ts_df %>%
select(Diesel, Ethanol, Gasoline, BEV, PHEV, Population:avg_taxable_income_100) %>%
rename(
`ICEV (Diesel)` = Diesel,
`ICEV (Ethanol)` = Ethanol,
`ICEV (Gasoline)` = Gasoline,
`Income (50th)` = avg_taxable_income_50,
`Income (90th)` = avg_taxable_income_90,
`Income (100th)`= avg_taxable_income_100
) %>%
GGally::ggpairs()
plot_correlation
plot_correlation <- multivariate_ts_df %>%
mutate(
Diesel                 = log(Diesel),
Ethanol                = log(Ethanol),
Gasoline               = log(Gasoline),
BEV                    = log(BEV),
PHEV                   = log(PHEV),
Population             = log(Population),
avg_taxable_income_50  = log(avg_taxable_income_50),
avg_taxable_income_100 = log(avg_taxable_income_100)) %>%
select(Diesel, Ethanol, Gasoline, BEV, PHEV,
Population,
avg_taxable_income_50, avg_taxable_income_100) %>%
rename(
`ICEV (Diesel)` = Diesel,
`ICEV (Ethanol)` = Ethanol,
`ICEV (Gasoline)` = Gasoline,
`Income (50th)` = avg_taxable_income_50,
`Income (90th)` = avg_taxable_income_90,
`Income (100th)`= avg_taxable_income_100
) %>%
GGally::ggpairs()
plot_correlation <- multivariate_ts_df %>%
mutate(
Diesel                 = log(Diesel),
Ethanol                = log(Ethanol),
Gasoline               = log(Gasoline),
BEV                    = log(BEV),
PHEV                   = log(PHEV),
Population             = log(Population),
avg_taxable_income_50  = log(avg_taxable_income_50),
avg_taxable_income_100 = log(avg_taxable_income_100)) %>%
select(Diesel, Ethanol, Gasoline, BEV, PHEV,
Population,
avg_taxable_income_50, avg_taxable_income_100) %>%
rename(
`ICEV (Diesel)` = Diesel,
`ICEV (Ethanol)` = Ethanol,
`ICEV (Gasoline)` = Gasoline,
`Income (50th)` = avg_taxable_income_50,
`Income (100th)`= avg_taxable_income_100
) %>%
GGally::ggpairs()
plot_correlation
# Reshape the data for ggplot
df_long <- df_fleet_brazil %>%
rename(
`ICE (Diesel)`   = Diesel,
`ICE (Gasoline)` = Gasoline,
`ICE (Ethanol)`  = Ethanol,
) %>%
pivot_longer(cols = c(`ICE (Gasoline)`, `ICE (Ethanol)`,`ICE (Diesel)`,  PHEV, BEV), names_to = "fuel_type", values_to = "total")
setwd("C:/Users/joaov/Dropbox/R Assignments/master-thesis")
source("./2_code/00_packages.R")
source("./2_code/Pipeline/03_data_cleaning.R")
# Reshape the data for ggplot
df_long <- df_fleet_brazil %>%
rename(
`ICE (Diesel)`   = Diesel,
`ICE (Gasoline)` = Gasoline,
`ICE (Ethanol)`  = Ethanol,
) %>%
pivot_longer(cols = c(`ICE (Gasoline)`, `ICE (Ethanol)`,`ICE (Diesel)`,  PHEV, BEV), names_to = "fuel_type", values_to = "total")
View(df_long)
df_fleet_brazil
df_fleet_brazil %>%
tail(1)
df_fleet_brazil %>%
tail(1) %>%
mutate(BEV_percent = BEV/sum(Diesel:PHEV))
options(scipen = 999)
df_fleet_brazil %>%
tail(1) %>%
mutate(BEV_percent = BEV/sum(Diesel:PHEV))
df_fleet_brazil %>%
tail(1) %>%
mutate(BEV_percent = BEV/sum(Diesel:PHEV)) %>%
select(BEV_percent)
9.66e-10
df_fleet_brazil %>%
tail(1)
df_fleet_brazil %>%
tail(1) %>%
mutate(BEV_percent = BEV/sum(Diesel, Ethanol, Gasoline, Gas, BEV, PHEV)) %>%
select(BEV_percent)
df_fleet_brazil %>%
tail(1) %>%
mutate(BEV_percent = 100*BEV/sum(Diesel, Ethanol, Gasoline, Gas, BEV, PHEV)) %>%
select(BEV_percent)
df_fleet_brazil %>%
tail(1) %>%
mutate(PHEV_percent = 100*PHEV/sum(Diesel, Ethanol, Gasoline, Gas, BEV, PHEV)) %>%
select(PHEV_percent)
df_fleet_brazil %>%
tail(1) %>%
mutate(BEV_percent = 100*BEV/sum(Diesel, Ethanol, Gasoline, Gas, BEV, PHEV)) %>%
select(BEV_percent)
df_fleet_brazil %>%
tail(1) %>%
mutate(PHEV_percent = 100*PHEV/sum(Diesel, Ethanol, Gasoline, Gas, BEV, PHEV)) %>%
select(PHEV_percent)
source("C:/Users/joaov/Dropbox/R Assignments/master-thesis/2_code/Pipeline/05_income_data.R", echo=TRUE)
source("C:/Users/joaov/Dropbox/R Assignments/master-thesis/2_code/Pipeline/05_income_data.R", echo=TRUE)
income_data_wide
summary(income_data_wide)
View(price_df)
