data = multivariate_ts[,'BEV'],
fitted = fitted(fcast_ETS)
)
time_df
plot_fcast_ETS_fit_obs <- ggplot(time_df, aes(x = date)) +
geom_line(aes(y = data, color = "Data")) +
geom_line(aes(y = y, color = "Fitted")) +
xlab("Year/Month") +
ylab("BEV Stock (log transformed)") +
guides(colour = guide_legend(title = " ")) +
theme_bw()
plot_fcast_ETS_fit_obs
time_df_ETS <- data.frame(
date = as.Date(time(multivariate_ts)),
data = multivariate_ts[,'BEV'],
fitted = fitted(fcast_ETS)
)
plot_fcast_ETS_fit_obs <- ggplot(time_df_ETS, aes(x = date)) +
geom_line(aes(y = data, color = "Data")) +
geom_line(aes(y = y, color = "Fitted")) +
xlab("Year/Month") +
ylab("BEV Stock (log transformed)") +
guides(colour = guide_legend(title = " ")) +
theme_bw()
plot_fcast_ETS_fit_obs
time_df_ARIMA <- data.frame(
date = as.Date(time(multivariate_ts)),
data = multivariate_ts[,'BEV'],
fitted = fitted(fcast_ARIMA)
)
plot_fcast_ARIMA_fit_obs <- ggplot(time_df_ARIMA, aes(x = date)) +
geom_line(aes(y = data, color = "Data")) +
geom_line(aes(y = x, color = "Fitted")) +
xlab("Year/Month") +
ylab("BEV Stock (log transformed)") +
guides(colour = guide_legend(title = " ")) +
theme_bw()
plot_fcast_ARIMA_fit_obs
time_df_TS <- data.frame(
date = as.Date(time(multivariate_ts)),
data = multivariate_ts[,'BEV'],
fitted = fitted(fcast_TS)
)
plot_fcast_TS_fit_obs <- ggplot(time_df_TS, aes(x = date)) +
geom_line(aes(y = data, color = "Data")) +
geom_line(aes(y = fitted, color = "Fitted")) +
xlab("Year/Month") +
ylab("BEV Stock (log transformed)") +
guides(colour = guide_legend(title = " ")) +
theme_bw()
plot_fcast_TS_fit_obs
plot_fcast_fitvsobs_ETS <- ggplot(time_df_ETS, aes(x = date)) +
geom_line(aes(y = data, color = "Data")) +
geom_line(aes(y = y, color = "Fitted")) +
xlab("Year/Month") +
ylab("BEV Stock (log transformed)") +
guides(colour = guide_legend(title = " ")) +
theme_bw()
if (!file.exists("./4_plots/plot_fcast_TS_fit_obs.png")) {
ggsave("./4_plots/plot_fcast_TS_fit_obs.png",
plot   = plot_fcast_fitvsobs_ETS,
height = 6,
width  = 8)
print("File successfully saved.")
} else {
print("File already exists in the repository.")
}
plot_fcast_fitvsobs_TS <- ggplot(time_df_TS, aes(x = date)) +
geom_line(aes(y = data, color = "Data")) +
geom_line(aes(y = y, color = "Fitted")) +
xlab("Year/Month") +
ylab("BEV Stock (log transformed)") +
guides(colour = guide_legend(title = " ")) +
theme_bw()
if (!file.exists("./4_plots/plot_fcast_TS_fit_obs.png")) {
ggsave("./4_plots/plot_fcast_TS_fit_obs.png",
plot   = plot_fcast_fitvsobs_TS,
height = 6,
width  = 8)
print("File successfully saved.")
} else {
print("File already exists in the repository.")
}
plot_fcast_fitvsobs_ETS <- ggplot(time_df_ETS, aes(x = date)) +
geom_line(aes(y = data, color = "Data")) +
geom_line(aes(y = y, color = "Fitted")) +
xlab("Year/Month") +
ylab("BEV Stock (log transformed)") +
guides(colour = guide_legend(title = " ")) +
theme_bw()
if (!file.exists("./4_plots/plot_fcast_fitvsobs_ETS.png")) {
ggsave("./4_plots/plot_fcast_fitvsobs_ETS.png",
plot   = plot_fcast_fitvsobs_ETS,
height = 6,
width  = 8)
print("File successfully saved.")
} else {
print("File already exists in the repository.")
}
time_df_TS <- data.frame(
date = as.Date(time(multivariate_ts)),
data = multivariate_ts[,'BEV'],
fitted = fitted(fcast_TS)
)
plot_fcast_fitvsobs_TS <- ggplot(time_df_TS, aes(x = date)) +
geom_line(aes(y = data, color = "Data")) +
geom_line(aes(y = y, color = "Fitted")) +
xlab("Year/Month") +
ylab("BEV Stock (log transformed)") +
guides(colour = guide_legend(title = " ")) +
theme_bw()
if (!file.exists("./4_plots/plot_fcast_fitvsobs_TS.png")) {
ggsave("./4_plots/plot_fcast_fitvsobs_TS.png",
plot   = plot_fcast_fitvsobs_TS,
height = 6,
width  = 8)
print("File successfully saved.")
} else {
print("File already exists in the repository.")
}
time_df_TS
time_df_TS <- data.frame(
date = as.Date(time(multivariate_ts)),
data = multivariate_ts[,'BEV'],
fitted = fitted(fcast_TS)
)
plot_fcast_fitvsobs_TS <- ggplot(time_df_TS, aes(x = date)) +
geom_line(aes(y = data, color = "Data")) +
geom_line(aes(y = fitted, color = "Fitted")) +
xlab("Year/Month") +
ylab("BEV Stock (log transformed)") +
guides(colour = guide_legend(title = " ")) +
theme_bw()
if (!file.exists("./4_plots/plot_fcast_fitvsobs_TS.png")) {
ggsave("./4_plots/plot_fcast_fitvsobs_TS.png",
plot   = plot_fcast_fitvsobs_TS,
height = 6,
width  = 8)
print("File successfully saved.")
} else {
print("File already exists in the repository.")
}
ggsave("./4_plots/plot_fcast_fitvsobs_TS.png",
plot   = plot_fcast_fitvsobs_TS,
height = 6,
width  = 8)
time_df_ARIMA <- data.frame(
date = as.Date(time(multivariate_ts)),
data = multivariate_ts[,'BEV'],
fitted = fitted(fcast_ARIMA)
)
plot_fcast_fitvsobs_ARIMA <- ggplot(time_df_ARIMA, aes(x = date)) +
geom_line(aes(y = data, color = "Data")) +
geom_line(aes(y = x, color = "Fitted")) +
xlab("Year/Month") +
ylab("BEV Stock (log transformed)") +
guides(colour = guide_legend(title = " ")) +
theme_bw()
if (!file.exists("./4_plots/plot_fcast_fitvsobs_ARIMA.png")) {
ggsave("./4_plots/plot_fcast_fitvsobs_ARIMA.png",
plot   = plot_fcast_fitvsobs_ARIMA,
height = 6,
width  = 8)
print("File successfully saved.")
} else {
print("File already exists in the repository.")
}
predict_2030
source("C:/Users/joaov/Dropbox/R Assignments/master-thesis/2_code/Pipeline/09d_forecasting_prophet.R", echo=TRUE)
# Plotting results
plot(model, predict_2030)
df_2030
predict_2030
# Creating the model
fit_Prophet <- prophet(df, seasonality.mode = "multiplicative")
# Creating the future dataframe to be populated with forecasts
df_2030 <- make_future_dataframe(fit_Prophet, periods=60, freq='month')
# Running forecast
predict_2030 <- predict(fit_Prophet, df_2030)
# Plotting results
plot(fit_Prophet, predict_2030)
fit_Prophet %>%
residuals() %>% ggtsdisplay()
fit_Prophet
predict_2030
# Plotting results
plot(fit_Prophet, fcast_Prophet)
# Running forecast
fcast_Prophet <- predict(fit_Prophet, df_2030)
# Plotting results
plot(fit_Prophet, fcast_Prophet)
plot(fit_Prophet, fcast_Prophet)+
labs(
title = "Forecasting of BEV stock in Brazil: Meta's Prophet model",
subtitle = "Model ditted with additive seasonality ",
x = "Year",
y = "BEV Stock in Brazil")+
scale_y_continuous(labels = scales::comma)+
theme_bw()
plot_fcast_Prophet <- plot(fit_Prophet, fcast_Prophet)+
labs(
title = "Forecasting of BEV stock in Brazil: Meta's Prophet model",
subtitle = "Model fitted with additive seasonality ",
x = "Year",
y = "BEV Stock in Brazil")+
scale_y_continuous(labels = scales::comma)+
theme_bw()
if (!file.exists("./4_plots/plot_fcast_Prophet.png")) {
ggsave("./4_plots/plot_fcast_Prophet.png",
plot   = plot_fcast_Prophet,
height = 6,
width  = 8)
print("File successfully saved.")
} else {
print("File already exists in the repository.")
}
accuracy(fit_Prophet)
fit_Prophet
View(fit_Prophet)
# Creating the model
fit_Prophet <- prophet(df, seasonality.mode = "additive")
# Running forecast
fcast_Prophet <- predict(fit_Prophet, df_2030)
# Plotting results
plot(fit_Prophet, fcast_Prophet)
plot_fcast_Prophet <- plot(fit_Prophet, fcast_Prophet)+
labs(
title = "Forecasting of BEV stock in Brazil: Meta's Prophet model",
subtitle = "Model fitted with additive seasonality ",
x = "Year",
y = "BEV Stock in Brazil")+
scale_y_continuous(labels = scales::comma)+
theme_bw()
plot_fcast_Prophet
plot_fcast_Prophet <- plot(fit_Prophet, fcast_Prophet)+
labs(
title = "Forecasting of BEV stock in Brazil: Meta's Prophet model",
subtitle = "Model fitted with multiplicative seasonality ",
x = "Year",
y = "BEV Stock in Brazil")+
scale_y_continuous(labels = scales::comma)+
theme_bw()
Converting it back to a df for the prophet package
source("./2_code/Pipeline/07_combined_data.R")
# Original univariate timeseries
univariate_ts
# Converting it back to a df for the prophet package
start_date <- as.Date("2020-05-01")
end_date   <- length(univariate_ts)
dates      <- seq.Date(from = start_date, by = "month", length.out = end_date)
df         <- data.frame(ds = dates, y = as.vector(univariate_ts))
# Creating the model
fit_Prophet <- prophet(df, seasonality.mode = "multiplicative")
# Creating the future dataframe to be populated with forecasts
df_2030 <- make_future_dataframe(fit_Prophet, periods=60, freq='month')
## 2.2. Forecasting values and plotting results --------------------------------
# Running forecast
fcast_Prophet <- predict(fit_Prophet, df_2030)
# Plotting results
plot(fit_Prophet, fcast_Prophet)
prophet_plot_components(model, predict_2030)
### Plotting forecasts ---------------------------------------------------------
plot_fcast_Prophet <- plot(fit_Prophet, fcast_Prophet)+
labs(
title = "Forecasting of BEV stock in Brazil: Meta's Prophet model",
subtitle = "Model fitted with multiplicative seasonality ",
x = "Year",
y = "BEV Stock in Brazil")+
scale_y_continuous(labels = scales::comma)+
theme_bw()
plot_fcast_Prophet
time_df_ETS <- data.frame(
date = as.Date(time(multivariate_ts)),
data = multivariate_ts[,'BEV'],
fitted = fitted(fcast_Prophet)
)
fcast_Prophet
View(fit_Prophet)
?growth
?prophet::growth
?Prophet::growth
?prophet
# Creating the model
fit_Prophet <- prophet(df, seasonality.mode = "multiplicative", growth = logistic)
# Creating the model
fit_Prophet <- prophet(df, seasonality.mode = "multiplicative", growth = "logistic")
# Creating the model
fit_Prophet <- prophet(df, seasonality.mode = "multiplicative", growth = "flat")
# Plotting results
plot(fit_Prophet, fcast_Prophet)
# Creating the model
fit_Prophet <- prophet(df, seasonality.mode = "multiplicative", growth = "flat")
fcast_Prophet <- predict(fit_Prophet, df_2030)
# Plotting results
plot(fit_Prophet, fcast_Prophet)
# Creating the model
fit_Prophet <- prophet(df, seasonality.mode = "multiplicative", growth = "linear")
# Creating the model
fit_Prophet <- prophet(df, seasonality.mode = "multiplicative", growth = "linear")
# Creating the model
fit_Prophet <- prophet(df, seasonality.mode = "multiplicative", growth = "linear")
# Creating the future dataframe to be populated with forecasts
df_2030 <- make_future_dataframe(fit_Prophet, periods=60, freq='month')
## 2.2. Forecasting values and plotting results --------------------------------
# Running forecast
fcast_Prophet <- predict(fit_Prophet, df_2030)
# Plotting results
plot(fit_Prophet, fcast_Prophet)
prophet_plot_components(model, predict_2030)
View(fcast_Prophet)
fcast$yhat
fcast_Prophet$yhat
time_df_ETS <- data.frame(
date = as.Date(time(multivariate_ts)),
data = multivariate_ts[,'BEV'],
fitted = fcast_Prophet$yhat
)
fitted_values_Prophet <- fcast_Prophet %>%
head(60) %>%
select(yhat)
View(fitted_values_Prophet)
time_df_ETS <- data.frame(
date = as.Date(time(multivariate_ts)),
data = multivariate_ts[,'BEV'],
fitted = fitted_values_Prophet
)
time_df_Prophet <- data.frame(
date = as.Date(time(multivariate_ts)),
data = multivariate_ts[,'BEV'],
fitted = fitted_values_Prophet
)
time_df_Prophet <- data.frame(
date = as.Date(time(multivariate_ts)),
data = multivariate_ts[,'BEV'],
fitted = fitted_values_Prophet
)
time_df_Prophet
plot_fcast_fitvsobs_Prophet <- ggplot(time_df_Prophet, aes(x = date)) +
geom_line(aes(y = data, color = "Data")) +
geom_line(aes(y = yhat, color = "Fitted")) +
xlab("Year/Month") +
ylab("BEV Stock (log transformed)") +
guides(colour = guide_legend(title = " ")) +
theme_bw()
plot_fcast_fitvsobs_Prophet
if (!file.exists("./4_plots/plot_fcast_fitvsobs_ETS.png")) {
ggsave("./4_plots/plot_fcast_fitvsobs_ETS.png",
plot   = plot_fcast_fitvsobs_Prophet,
height = 6,
width  = 8)
print("File successfully saved.")
} else {
print("File already exists in the repository.")
}
if (!file.exists("./4_plots/plot_fcast_fitvsobs_Prophet.png")) {
ggsave("./4_plots/plot_fcast_fitvsobs_Prophet.png",
plot   = plot_fcast_fitvsobs_Prophet,
height = 6,
width  = 8)
print("File successfully saved.")
} else {
print("File already exists in the repository.")
}
# 1. Packages and Pipeline Data ------------------------------------------------
source("./2_code/Pipeline/09a_forecasting_TS.R")
source("./2_code/Pipeline/09b_forecasting_ARIMA.R")
source("./2_code/Pipeline/09c_forecasting_ETS.R")
source("./2_code/Pipeline/09d_forecasting_prophet.R")
fcast_ARIMA
View(time_df_ARIMA)
# Original univariate timeseries
univariate_ts
# Converting it back to a df for the prophet package
start_date <- as.Date("2020-05-01")
end_date   <- length(univariate_ts)
dates      <- seq.Date(from = start_date, by = "month", length.out = end_date)
df         <- data.frame(ds = dates, y = as.vector(univariate_ts))
# Creating the model
fit_Prophet <- prophet(df, seasonality.mode = "multiplicative", growth = "linear")
# Creating the future dataframe to be populated with forecasts
df_2030 <- make_future_dataframe(fit_Prophet, periods=60, freq='month')
# Running forecast
fcast_Prophet <- predict(fit_Prophet, df_2030)
# Plotting results
plot(fit_Prophet, fcast_Prophet)
prophet_plot_components(model, predict_2030)
prophet_plot_components(model, predict_2030)
prophet_plot_components(fit_Prophet, predict_2030)
prophet_plot_components(fit_Prophet, fcast_Prophet)
plot_fcast_Prophet <- plot(fit_Prophet, fcast_Prophet)+
labs(
title = "Forecasting of BEV stock in Brazil: Meta's Prophet model",
subtitle = "Model fitted with linear growth and multiplicative seasonality",
x = "Year",
y = "BEV Stock in Brazil")+
scale_y_continuous(labels = scales::comma)+
theme_bw()
plot_fcast_Prophet
grid.arrange(
plot_fcast_ARIMA, plot_fcast_ETS,
plot_fcast_TS, plot_fcast_Prophet,
ncol = 2, nrow = 2
)
combined_plot <- (plot_fcast_ARIMA | plot_fcast_ETS) /
(plot_fcast_TS | plot_fcast_Prophet)
patchwork::combined_plot <- (plot_fcast_ARIMA | plot_fcast_ETS) /
(plot_fcast_TS | plot_fcast_Prophet)
?grid.arrange
plot_fcast_ARIMA   <- plot_fcast_ARIMA   + theme(plot.title = element_blank())
plot_fcast_ETS     <- plot_fcast_ETS     + theme(plot.title = element_blank())
plot_fcast_TS      <- plot_fcast_TS      + theme(plot.title = element_blank())
plot_fcast_Prophet <- plot_fcast_Prophet + theme(plot.title = element_blank())
grid.arrange(
plot_fcast_ARIMA, plot_fcast_ETS,
plot_fcast_TS, plot_fcast_Prophet,
ncol = 2, nrow = 2
)
?theme
grid_with_title <- grid.arrange(
grobs = list(
arrangeGrob(plot_fcast_ARIMA, top = "A"),
arrangeGrob(plot_fcast_ETS, top = "B"),
arrangeGrob(plot_fcast_TS, top = "C"),
arrangeGrob(plot_fcast_Prophet, top = "D")
),
ncol = 2,
top = textGrob("Forecast Comparison Across Models", gp = gpar(fontsize = 16, fontface = "bold"))
)
library(grid)
grid_with_title <- grid.arrange(
grobs = list(
arrangeGrob(plot_fcast_ARIMA, top = "A"),
arrangeGrob(plot_fcast_ETS, top = "B"),
arrangeGrob(plot_fcast_TS, top = "C"),
arrangeGrob(plot_fcast_Prophet, top = "D")
),
ncol = 2,
top = textGrob("Forecast Comparison Across Models", gp = gpar(fontsize = 16, fontface = "bold"))
)
plot_fcast_ARIMA   <- plot_fcast_ARIMA   +
theme(plot.title    = element_blank(),
plot.subtitle = element_blank())
plot_fcast_ETS     <- plot_fcast_ETS     +
theme(plot.title    = element_blank(),
plot.subtitle = element_blank())
plot_fcast_TS      <- plot_fcast_TS       +
theme(plot.title    = element_blank(),
plot.subtitle = element_blank())
plot_fcast_Prophet <- plot_fcast_Prophet  +
theme(plot.title    = element_blank(),
plot.subtitle = element_blank())
grid_with_title <- grid.arrange(
grobs = list(
arrangeGrob(plot_fcast_ARIMA, top = "A"),
arrangeGrob(plot_fcast_ETS, top = "B"),
arrangeGrob(plot_fcast_TS, top = "C"),
arrangeGrob(plot_fcast_Prophet, top = "D")
),
ncol = 2,
top = textGrob("Forecast Comparison Across Models", gp = gpar(fontsize = 16, fontface = "bold"))
)
plot_fcast_ARIMA   <- plot_fcast_ARIMA   +
theme(plot.title    = element_blank(),
plot.subtitle = element_blank(),
axis.title.y  = element_blank(),
axis.title.x  = element_blank())
plot_fcast_ETS     <- plot_fcast_ETS     +
theme(plot.title    = element_blank(),
plot.subtitle = element_blank(),
axis.title.y  = element_blank(),
axis.title.x  = element_blank())
plot_fcast_TS      <- plot_fcast_TS      +
theme(plot.title    = element_blank(),
plot.subtitle = element_blank(),
axis.title.y  = element_blank(),
axis.title.x  = element_blank())
plot_fcast_Prophet <- plot_fcast_Prophet +
theme(plot.title    = element_blank(),
plot.subtitle = element_blank(),
axis.title.y  = element_blank(),
axis.title.x  = element_blank())
grid_with_title <- grid.arrange(
grobs = list(
arrangeGrob(plot_fcast_ARIMA, top = "A"),
arrangeGrob(plot_fcast_ETS, top = "B"),
arrangeGrob(plot_fcast_TS, top = "C"),
arrangeGrob(plot_fcast_Prophet, top = "D")
),
ncol = 2,
top = textGrob("Forecast Comparison Across Models", gp = gpar(fontsize = 16, fontface = "bold"))
)
grid_with_title <- grid.arrange(
grobs = list(
arrangeGrob(plot_fcast_ARIMA,   top = "(a) ARIMA"),
arrangeGrob(plot_fcast_ETS,     top = "(b) ETS"),
arrangeGrob(plot_fcast_TS,      top = "(c) Linear"),
arrangeGrob(plot_fcast_Prophet, top = "(d) Prophet")
),
ncol = 2,
top = textGrob("Forecast Comparison Across Models", gp = gpar(fontsize = 16, fontface = "bold"))
)
grid_with_title <- grid.arrange(
grobs = list(
arrangeGrob(plot_fcast_ARIMA,   top = "(a) ARIMA"),
arrangeGrob(plot_fcast_ETS,     top = "(b) ETS"),
arrangeGrob(plot_fcast_TS,      top = "(c) Linear"),
arrangeGrob(plot_fcast_Prophet, top = "(d) Prophet")
),
ncol = 2,
top = textGrob("Forecast Comparison Across Models", gp = gpar(fontsize = 16, fontface = "bold"))
)
source("./2_code/Pipeline/09d_forecasting_prophet.R")
