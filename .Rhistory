geom_sf(data=electric_vehicles_per_state, aes(fill=total_electric_vehicles), color=NA, size=.15) +
labs(
title = "Electrice Vehicle Fleet in Brazil",
subtitle = "Sum of Electrical Vehicles per State",
fill = "Total Vehicles") +
geom_sf_text(data=electric_vehicles_per_state, aes(label=abbrev_state), size=2, color="black") +
scale_fill_distiller(palette="Purples", name="Total Vehicles", direction = 1) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#ffffff", color = NA)
) +
no_axis
plot_total_e_vehicles
ggsave("./4_plots/plot_total_e_vehicles.png", plot = plot_total_e_vehicles)
# Total e-Vehicles
plot_total_e_vehicles <- ggplot() +
geom_sf(data=electric_vehicles_per_state, aes(fill=total_electric_vehicles), color=NA, size=.15) +
labs(
title = "Electrice Vehicle Fleet in Brazil",
subtitle = "Sum of Electrical Vehicles per State",
fill = "Total Vehicles") +
geom_sf_text(data=electric_vehicles_per_state, aes(label=abbrev_state), size=2, color="black") +
scale_fill_distiller(palette="Purples", name="Total Vehicles", direction = 1, labels = scales::comma_format()) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#ffffff", color = NA)
) +
no_axis
plot_total_e_vehicles
ggsave("./4_plots/plot_total_e_vehicles.png", plot = plot_total_e_vehicles)
# 1. Packages ------------------------------------------------------------------
pacman::p_load(readr,        # Read CSV files
readxl,       # Read Excel files
dplyr,        # Data manipulation
tidyr,        # Data tidying and reshaping
ggplot2,      # Create data visualizations
scales,       # Format axes and legends (percentages, currencies)
stringr,      # String manipulation
lubridate,    # Date and time manipulation
basedosdados, # Access to Brazilian public data via BigQuery
geobr,        # Brazilian geographic data
sf,           # Handle spatial/geographic data
viridis,      # Color palettes for data visualization
RColorBrewer) # Additional color palettes for plotting
# 2. Raw dataframes ------------------------------------------------------------
# 2.1. Dowloaded files ---------------------------------------------------------
# Vehicle data on municipal level (per fuel type)
fleet_df_nov24 <- read_excel("1_raw_data/2_vehicle_fleet/D_Frota_por_UF_Municipio_COMBUSTIVEL_Novembro_2024.xlsx")
# 2.2. Files from packages -----------------------------------------------------
# State data with geographical coordinates
state_df <- geobr::read_state(year = 2020,showProgress = FALSE)
# 2.3. Files from BigQuery ----------------------------------------------------
source("./2_code/01_descriptive-demographics.R")
# 3. Manipulating data to generate plots and tables ----------------------------
# 3.1 Vehicle fleet (total/electric) -------------------------------------------
# Aggregate municipal data in state level
fleet_state <- fleet_df_nov24 %>%
group_by(UF,`Combustível Veículo`) %>%  # Grouping by kind of fuel used
summarize(Total = sum(`Qtd. Veículos`))
# Data frame of total vehicles per state
vehicles_per_state <- fleet_state %>%
group_by(UF) %>%
summarise(total_vehicles = sum(Total))
# Filter electric vehicles and creating a new variable for % of electric or hybrid vehicles
electric_vehicles_per_state <- fleet_state %>%
filter(grepl("^ELETRICO", `Combustível Veículo`)) %>%
group_by(UF) %>%
summarise(total_electric_vehicles = sum(Total)) %>%
left_join(vehicles_per_state, by = "UF") %>%
mutate(percentage = scales::percent(total_electric_vehicles/total_vehicles, accuracy = 0.01)) %>%
filter(UF != "Sem Informação")
# Create a string to use as common key to join the data frames
state_df$UF <- state_df$name_state %>%
stringi::stri_trans_general("Latin-ASCII") %>%
toupper()
# Join electric vehicle df with geographic info on the states
electric_vehicles_per_state <- electric_vehicles_per_state %>%
left_join(state_df, by = "UF") %>%
select(code_state, abbrev_state, name_state, code_region, name_region, geom, total_electric_vehicles, total_vehicles, percentage)
# Update variable name
electric_vehicles_per_state$name_state <- tolower(electric_vehicles_per_state$name_state)
# Adding State population to the data frame
state_pop <- pop_city %>%
group_by(sigla_uf) %>%
summarize(total_pop = sum(populacao)) %>%
rename(abbrev_state = sigla_uf)
electric_vehicles_per_state <- electric_vehicles_per_state %>%
left_join(state_pop, by = "abbrev_state")
electric_vehicles_per_state <- electric_vehicles_per_state %>%
mutate(vehicle_per_capita = total_vehicles/total_pop,
electric_vehicle_per_capita = total_electric_vehicles/total_pop)
# 4. Plots ---------------------------------------------------------------------
## 4.1. Maps -------------------------------------------------------------------
# Convert the df to generate the map
electric_vehicles_per_state <- st_as_sf(electric_vehicles_per_state)
# Update the df to make the percentage column numeric
electric_vehicles_per_state$percentage_num <- as.numeric(sub("%", "", electric_vehicles_per_state$percentage))
# Create a variable for the theme in the plots
no_axis <- theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
# Percentage of electric vehicles per State
# Total e-Vehicles
plot_total_e_vehicles <- ggplot() +
geom_sf(data=electric_vehicles_per_state, aes(fill=total_electric_vehicles), color=NA, size=.15) +
labs(
title = "Electric Vehicle Fleet in Brazil",
subtitle = "Sum of Electrical Vehicles per State",
fill = "Total Vehicles") +
geom_sf_text(data=electric_vehicles_per_state, aes(label=abbrev_state), size=2, color="black") +
scale_fill_distiller(palette="Purples", name="Total Vehicles", direction = 1, labels = scales::comma_format()) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#ffffff", color = NA)
) +
no_axis
plot_total_e_vehicles
ggsave("./4_plots/plot_total_e_vehicles.png", plot = plot_total_e_vehicles)
# Electric vehicles as a percentage of the total state fleet
plot_share_of_e_vehicles <- ggplot() +
geom_sf(data=electric_vehicles_per_state, aes(fill=percentage_num), color=NA, size=.15) +
labs(
title = "Vehicle Fleet in Brazil",
subtitle = "Percentage of Electrical Vechile from Total Fleet per State",
fill = "Vehicles per Capita") +
geom_sf_text(data=electric_vehicles_per_state, aes(label=abbrev_state), size=2, color="black") +
scale_fill_distiller(palette="BuPu", name="% of Total Fleet", direction = 1) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#ffffff", color = NA)
) +
no_axis
plot_share_of_e_vehicles
ggsave("./4_plots/plot_share_of_e_vehicles.png", plot = plot_share_of_e_vehicles)
# Total Vehicles per Capita
plot_vehicles_per_capita <- ggplot() +
geom_sf(data=electric_vehicles_per_state, aes(fill=vehicle_per_capita), color=NA, size=.15) +
labs(
title = "Vehicle Fleet in Brazil",
subtitle = "Vehicle per Capita per State",
fill = "Vehicles per Capita") +
geom_sf_text(data=electric_vehicles_per_state, aes(label=abbrev_state), size=2, color="black") +
scale_fill_distiller(palette="Greens", name="Vehicles per Capita", direction = 1) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#ffffff", color = NA)
) +
no_axis
plot_vehicles_per_capita
ggsave("./4_plots/plot_vehicles_per_capita.png", plot = plot_vehicles_per_capita)
# Electric Vehicles per Capita
plot_e_vehicles_per_capita <- ggplot() +
geom_sf(data=electric_vehicles_per_state, aes(fill=electric_vehicle_per_capita), color=NA, size=.15) +
labs(
title = "Vehicle Fleet in Brazil",
subtitle = "Electric Vehicle per Capita per State",
fill = "Vehicles per Capita") +
geom_sf_text(data=electric_vehicles_per_state, aes(label=abbrev_state), size=2, color="black") +
scale_fill_distiller(palette="Blues", name="Electric Vehicles per Capita", direction = 1) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#ffffff", color = NA)
) +
no_axis
plot_e_vehicles_per_capita
ggsave("./4_plots/plot_e_vehicles_per_capita.png", plot = plot_e_vehicles_per_capita)
fleet_df_nov13 <- read_excel("1_raw_data/2_vehicle_fleet/2013_11_3_frota_uf_municipio_combustivel_nov_2013.xlsx")
fleet_df_nov14 <- read_excel("1_raw_data/2_vehicle_fleet/2014-11_3_frota_uf_municipio_combustivel_nov_2014.xlsx")
fleet_df_nov15 <- read_excel("1_raw_data/2_vehicle_fleet/2015-11_3_Frota_Por_UF_Municipio_Combustivel_NOV_2015.xlsx")
fleet_df_nov16 <- read_excel("1_raw_data/2_vehicle_fleet/2016-11_3_-_combustivel_-novembro_-2016.xlsx")
fleet_df_nov17 <- read_excel("1_raw_data/2_vehicle_fleet/2017-11_frota_por_uf_municipio_combustivel_nov_17.xlsx")
fleet_df_nov18 <- read_excel("1_raw_data/2_vehicle_fleet/2018-11_d_frota_por_uf_municipio_combustivel_novembro_2018.xlsx")
fleet_df_nov19 <- read_excel("1_raw_data/2_vehicle_fleet/2019-11_d_frota_por_uf_municipio_combustivel_novembro_2019.xlsx")
fleet_df_nov20 <- read_excel("1_raw_data/2_vehicle_fleet/2020-11_d_frota_por_uf_municipio_combustivel_novembro_2020.xlsx")
fleet_df_nov21 <- read_excel("1_raw_data/2_vehicle_fleet/2021-11_d_frota_por_uf_municipio_combustivel_novembro_2021.xlsx")
fleet_df_nov22 <- read_excel("1_raw_data/2_vehicle_fleet/2022-11_d_frota_por_uf_municipio_combustivel_novembro_2022.xlsx")
fleet_df_nov23 <- read_excel("1_raw_data/2_vehicle_fleet/2023-11_d_frota_por_uf_municipio_combustivel_novembro_2023.xlsx")
fleet_df_nov24 <- read_excel("1_raw_data/2_vehicle_fleet/D_Frota_por_UF_Municipio_COMBUSTIVEL_Novembro_2024.xlsx")
fleet_df_nov24
fleet_df_nov24 <- read_excel("1_raw_data/2_vehicle_fleet/D_Frota_por_UF_Municipio_COMBUSTIVEL_Novembro_2024.xlsx")
fleet_df_nov24 <- read_excel("1_raw_data/2_vehicle_fleet/2024-11_D_Frota_por_UF_Municipio_COMBUSTIVEL_Novembro_2024.xlsx")
fleet_df_nov24
pacman::p_load(readr,        # Read CSV files
readxl,       # Read Excel files
dplyr,        # Data manipulation
tidyr,        # Data tidying and reshaping
ggplot2,      # Create data visualizations
scales,       # Format axes and legends (percentages, currencies)
stringr,      # String manipulation
lubridate,    # Date and time manipulation
basedosdados, # Access to Brazilian public data via BigQuery
geobr,        # Brazilian geographic data
sf,           # Handle spatial/geographic data
viridis,      # Color palettes for data visualization
stringi,
RColorBrewer) # Additional color palettes for plotting
file_paths <- c(
"1_raw_data/2_vehicle_fleet/2013_11_3_frota_uf_municipio_combustivel_nov_2013.xlsx",
"1_raw_data/2_vehicle_fleet/2014-11_3_frota_uf_municipio_combustivel_nov_2014.xlsx",
"1_raw_data/2_vehicle_fleet/2015-11_3_Frota_Por_UF_Municipio_Combustivel_NOV_2015.xlsx",
"1_raw_data/2_vehicle_fleet/2016-11_3_-_combustivel_-novembro_-2016.xlsx",
"1_raw_data/2_vehicle_fleet/2017-11_frota_por_uf_municipio_combustivel_nov_17.xlsx",
"1_raw_data/2_vehicle_fleet/2018-11_d_frota_por_uf_municipio_combustivel_novembro_2018.xlsx",
"1_raw_data/2_vehicle_fleet/2019-11_d_frota_por_uf_municipio_combustivel_novembro_2019.xlsx",
"1_raw_data/2_vehicle_fleet/2020-11_d_frota_por_uf_municipio_combustivel_novembro_2020.xlsx",
"1_raw_data/2_vehicle_fleet/2021-11_d_frota_por_uf_municipio_combustivel_novembro_2021.xlsx",
"1_raw_data/2_vehicle_fleet/2022-11_d_frota_por_uf_municipio_combustivel_novembro_2022.xlsx",
"1_raw_data/2_vehicle_fleet/2023-11_d_frota_por_uf_municipio_combustivel_novembro_2023.xlsx",
"1_raw_data/2_vehicle_fleet/2024-11_D_Frota_por_UF_Municipio_COMBUSTIVEL_Novembro_2024.xlsx")
# State data with geographical coordinates
state_df <- geobr::read_state(year = 2020,showProgress = FALSE)
create_fleet_analysis_function <- function(file_paths, state_df) {
# Function to process each file
process_file <- function(file_path) {
# Extract year from filename (first 4 characters)
year <- as.numeric(substr(basename(file_path), 1, 4))
fleet_df <- read_excel(file_path)
# Aggregate municipal data at state level
fleet_state <- fleet_df %>%
group_by(UF, `Combustível Veículo`) %>%
summarize(Total = sum(`Qtd. Veículos`), .groups = 'drop')
# Data frame of total vehicles per state
vehicles_per_state <- fleet_state %>%
group_by(UF) %>%
summarise(total_vehicles = sum(Total), .groups = 'drop')
# Filter electric vehicles and create percentage
electric_vehicles_per_state <- fleet_state %>%
filter(grepl("^ELETRICO", `Combustível Veículo`)) %>%
group_by(UF) %>%
summarise(total_electric_vehicles = sum(Total), .groups = 'drop') %>%
left_join(vehicles_per_state, by = "UF") %>%
mutate(
percentage = scales::percent(total_electric_vehicles/total_vehicles, accuracy = 0.01),
year = year  # Add year column
) %>%
filter(UF != "Sem Informação")
return(electric_vehicles_per_state)
}
# Process all files and combine results
all_results <- lapply(file_paths, process_file)
combined_results <- bind_rows(all_results)
# Prepare state data frame
state_df$UF <- state_df$name_state %>%
stringi::stri_trans_general("Latin-ASCII") %>%
toupper()
# Final join with geographic information
final_result <- combined_results %>%
left_join(state_df, by = "UF") %>%
select(year, code_state, abbrev_state, name_state, code_region,
name_region, geom, total_electric_vehicles,
total_vehicles, percentage)
# Store the result in the global environment
assign("fleet_analysis_results", final_result, envir = .GlobalEnv)
return(final_result)
}
# State data with geographical coordinates
state_df <- geobr::read_state(year = 2020,showProgress = FALSE)
source("./2_code/01_descriptive-demographics.R")
create_fleet_analysis_function <- function(file_paths, state_df) {
# Function to process each file
process_file <- function(file_path) {
# Extract year from filename (first 4 characters)
year <- as.numeric(substr(basename(file_path), 1, 4))
fleet_df <- read_excel(file_path)
# Aggregate municipal data at state level
fleet_state <- fleet_df %>%
group_by(UF, `Combustível Veículo`) %>%
summarize(Total = sum(`Qtd. Veículos`), .groups = 'drop')
# Data frame of total vehicles per state
vehicles_per_state <- fleet_state %>%
group_by(UF) %>%
summarise(total_vehicles = sum(Total), .groups = 'drop')
# Filter electric vehicles and create percentage
electric_vehicles_per_state <- fleet_state %>%
filter(grepl("^ELETRICO", `Combustível Veículo`)) %>%
group_by(UF) %>%
summarise(total_electric_vehicles = sum(Total), .groups = 'drop') %>%
left_join(vehicles_per_state, by = "UF") %>%
mutate(
percentage = scales::percent(total_electric_vehicles/total_vehicles, accuracy = 0.01),
year = year  # Add year column
) %>%
filter(UF != "Sem Informação")
return(electric_vehicles_per_state)
}
# Process all files and combine results
all_results <- lapply(file_paths, process_file)
combined_results <- bind_rows(all_results)
# Prepare state data frame
state_df$UF <- state_df$name_state %>%
stringi::stri_trans_general("Latin-ASCII") %>%
toupper()
# Final join with geographic information
final_result <- combined_results %>%
left_join(state_df, by = "UF") %>%
select(year, code_state, abbrev_state, name_state, code_region,
name_region, geom, total_electric_vehicles,
total_vehicles, percentage)
# Store the result in the global environment
assign("fleet_analysis_results", final_result, envir = .GlobalEnv)
return(final_result)
}
results <- create_fleet_analysis_function(file_paths, state_df)
file_paths <- c(
"1_raw_data/2_vehicle_fleet/2013_11_3_frota_uf_municipio_combustivel_nov_2013.xlsx",
"1_raw_data/2_vehicle_fleet/2014-11_3_frota_uf_municipio_combustivel_nov_2014.xlsx",
"1_raw_data/2_vehicle_fleet/2015-11_3_Frota_Por_UF_Municipio_Combustivel_NOV_2015.xlsx",
"1_raw_data/2_vehicle_fleet/2016-11_3_-_combustivel_-novembro_-2016.xlsx",
"1_raw_data/2_vehicle_fleet/2017-11_frota_por_uf_municipio_combustivel_nov_17.xlsx",
"1_raw_data/2_vehicle_fleet/2018-11_d_frota_por_uf_municipio_combustivel_novembro_2018.xlsx",
"1_raw_data/2_vehicle_fleet/2019-11_d_frota_por_uf_municipio_combustivel_novembro_2019.xlsx",
"1_raw_data/2_vehicle_fleet/2020-11_d_frota_por_uf_municipio_combustivel_novembro_2020.xlsx",
"1_raw_data/2_vehicle_fleet/2021-11_d_frota_por_uf_municipio_combustivel_novembro_2021.xlsx",
"1_raw_data/2_vehicle_fleet/2022-11_d_frota_por_uf_municipio_combustivel_novembro_2022.xlsx",
"1_raw_data/2_vehicle_fleet/2023-11_d_frota_por_uf_municipio_combustivel_novembro_2023.xlsx",
"1_raw_data/2_vehicle_fleet/2024-11_D_Frota_por_UF_Municipio_COMBUSTIVEL_Novembro_2024.xlsx")
results <- create_fleet_analysis_function(file_paths, state_df)
fleet_df_nov24 <- read_excel("1_raw_data/2_vehicle_fleet/2024-11_D_Frota_por_UF_Municipio_COMBUSTIVEL_Novembro_2024.xlsx")
View(fleet_df_nov24)
fleet_df_nov13 <- read_excel("1_raw_data/2_vehicle_fleet/2013_11_3_frota_uf_municipio_combustivel_nov_2013.xlsx")
View(fleet_df_nov13)
fleet_df_nov13 <- read_excel("1_raw_data/2_vehicle_fleet/2013_11_3_frota_uf_municipio_combustivel_nov_2013.xlsx")
fleet_df_nov14 <- read_excel("1_raw_data/2_vehicle_fleet/2014-11_3_frota_uf_municipio_combustivel_nov_2014.xlsx")
fleet_df_nov15 <- read_excel("1_raw_data/2_vehicle_fleet/2015-11_3_Frota_Por_UF_Municipio_Combustivel_NOV_2015.xlsx")
fleet_df_nov16 <- read_excel("1_raw_data/2_vehicle_fleet/2016-11_3_-_combustivel_-novembro_-2016.xlsx")
fleet_df_nov17 <- read_excel("1_raw_data/2_vehicle_fleet/2017-11_frota_por_uf_municipio_combustivel_nov_17.xlsx")
fleet_df_nov18 <- read_excel("1_raw_data/2_vehicle_fleet/2018-11_d_frota_por_uf_municipio_combustivel_novembro_2018.xlsx")
fleet_df_nov19 <- read_excel("1_raw_data/2_vehicle_fleet/2019-11_d_frota_por_uf_municipio_combustivel_novembro_2019.xlsx")
fleet_df_nov20 <- read_excel("1_raw_data/2_vehicle_fleet/2020-11_d_frota_por_uf_municipio_combustivel_novembro_2020.xlsx")
fleet_df_nov21 <- read_excel("1_raw_data/2_vehicle_fleet/2021-11_d_frota_por_uf_municipio_combustivel_novembro_2021.xlsx")
fleet_df_nov22 <- read_excel("1_raw_data/2_vehicle_fleet/2022-11_d_frota_por_uf_municipio_combustivel_novembro_2022.xlsx")
fleet_df_nov23 <- read_excel("1_raw_data/2_vehicle_fleet/2023-11_d_frota_por_uf_municipio_combustivel_novembro_2023.xlsx")
fleet_df_nov24 <- read_excel("1_raw_data/2_vehicle_fleet/2024-11_D_Frota_por_UF_Municipio_COMBUSTIVEL_Novembro_2024.xlsx")
View(fleet_df_nov14)
View(fleet_df_nov15)
View(fleet_df_nov17)
View(fleet_df_nov19)
View(fleet_df_nov20)
View(fleet_df_nov13)
View(fleet_df_nov14)
View(fleet_df_nov15)
View(fleet_df_nov13)
# State data with geographical coordinates
state_df <- geobr::read_state(year = 2020,showProgress = FALSE)
file_paths <- c(
"1_raw_data/2_vehicle_fleet/2013_11_3_frota_uf_municipio_combustivel_nov_2013.xlsx",
"1_raw_data/2_vehicle_fleet/2014-11_3_frota_uf_municipio_combustivel_nov_2014.xlsx",
"1_raw_data/2_vehicle_fleet/2015-11_3_Frota_Por_UF_Municipio_Combustivel_NOV_2015.xlsx",
"1_raw_data/2_vehicle_fleet/2016-11_3_-_combustivel_-novembro_-2016.xlsx",
"1_raw_data/2_vehicle_fleet/2017-11_frota_por_uf_municipio_combustivel_nov_17.xlsx",
"1_raw_data/2_vehicle_fleet/2018-11_d_frota_por_uf_municipio_combustivel_novembro_2018.xlsx",
"1_raw_data/2_vehicle_fleet/2019-11_d_frota_por_uf_municipio_combustivel_novembro_2019.xlsx",
"1_raw_data/2_vehicle_fleet/2020-11_d_frota_por_uf_municipio_combustivel_novembro_2020.xlsx",
"1_raw_data/2_vehicle_fleet/2021-11_d_frota_por_uf_municipio_combustivel_novembro_2021.xlsx",
"1_raw_data/2_vehicle_fleet/2022-11_d_frota_por_uf_municipio_combustivel_novembro_2022.xlsx",
"1_raw_data/2_vehicle_fleet/2023-11_d_frota_por_uf_municipio_combustivel_novembro_2023.xlsx",
"1_raw_data/2_vehicle_fleet/2024-11_D_Frota_por_UF_Municipio_COMBUSTIVEL_Novembro_2024.xlsx")
create_fleet_analysis_function <- function(file_paths, state_df) {
# Function to process each file
process_file <- function(file_path) {
# Extract year from filename (first 4 characters)
year <- as.numeric(substr(basename(file_path), 1, 4))
fleet_df <- read_excel(file_path)
# Aggregate municipal data at state level
fleet_state <- fleet_df %>%
group_by(UF, `Combustível Veículo`) %>%
summarize(Total = sum(`Qtd. Veículos`), .groups = 'drop')
# Data frame of total vehicles per state
vehicles_per_state <- fleet_state %>%
group_by(UF) %>%
summarise(total_vehicles = sum(Total), .groups = 'drop')
# Filter electric vehicles and create percentage
electric_vehicles_per_state <- fleet_state %>%
filter(grepl("^ELETRICO", `Combustível Veículo`)) %>%
group_by(UF) %>%
summarise(total_electric_vehicles = sum(Total), .groups = 'drop') %>%
left_join(vehicles_per_state, by = "UF") %>%
mutate(
percentage = scales::percent(total_electric_vehicles/total_vehicles, accuracy = 0.01),
year = year  # Add year column
) %>%
filter(UF != "Sem Informação")
return(electric_vehicles_per_state)
}
# Process all files and combine results
all_results <- lapply(file_paths, process_file)
combined_results <- bind_rows(all_results)
# Prepare state data frame
state_df$UF <- state_df$name_state %>%
stringi::stri_trans_general("Latin-ASCII") %>%
toupper()
# Final join with geographic information
final_result <- combined_results %>%
left_join(state_df, by = "UF") %>%
select(year, code_state, abbrev_state, name_state, code_region,
name_region, geom, total_electric_vehicles,
total_vehicles, percentage)
# Store the result in the global environment
assign("fleet_analysis_results", final_result, envir = .GlobalEnv)
return(final_result)
}
results <- create_fleet_analysis_function(file_paths, state_df)
results <- create_fleet_analysis_function(file_paths, state_df)
View(results)
View(fleet_analysis_results)
rm(results)
rm(fleet_analysis_results)
create_fleet_analysis_function(file_paths, state_df)
yearly_results <- fleet_analysis_results %>%
group_by("year") %>%
summarize(total_e_vehicles = sum(total_vehicles))
View(yearly_results)
yearly_results <- fleet_analysis_results %>%
group_by(year) %>%
summarize(total_e_vehicles = sum(total_vehicles))
View(yearly_results)
fleet_df_nov21 <- read_excel("1_raw_data/2_vehicle_fleet/2021-11_d_frota_por_uf_municipio_combustivel_novembro_2021.xlsx")
View(fleet_df_nov21)
# Aggregate municipal data in state level
fleet_state_21 <- fleet_df_nov21 %>%
group_by(UF,`Combustível Veículo`) %>%  # Grouping by kind of fuel used
summarize(Total = sum(`Qtd. Veículos`))
View(fleet_state_21)
# Data frame of total vehicles per state
vehicles_per_state_21 <- fleet_state_21 %>%
group_by(UF) %>%
summarise(total_vehicles = sum(Total))
# Filter electric vehicles and creating a new variable for % of electric or hybrid vehicles
electric_vehicles_per_state_21 <- fleet_state_21 %>%
filter(grepl("^ELETRICO", `Combustível Veículo`)) %>%
group_by(UF) %>%
summarise(total_electric_vehicles = sum(Total)) %>%
left_join(vehicles_per_state, by = "UF") %>%
mutate(percentage = vehicles_per_state_24::percent(total_electric_vehicles/total_vehicles, accuracy = 0.01)) %>%
filter(UF != "Sem Informação")
# Filter electric vehicles and creating a new variable for % of electric or hybrid vehicles
electric_vehicles_per_state_21 <- fleet_state_21 %>%
filter(grepl("^ELETRICO", `Combustível Veículo`)) %>%
group_by(UF) %>%
summarise(total_electric_vehicles = sum(Total)) %>%
left_join(vehicles_per_state_21, by = "UF") %>%
mutate(percentage = vehicles_per_state_24::percent(total_electric_vehicles/total_vehicles, accuracy = 0.01)) %>%
filter(UF != "Sem Informação")
# Filter electric vehicles and creating a new variable for % of electric or hybrid vehicles
electric_vehicles_per_state_21 <- fleet_state_21 %>%
filter(grepl("^ELETRICO", `Combustível Veículo`)) %>%
group_by(UF) %>%
summarise(total_electric_vehicles = sum(Total)) %>%
left_join(vehicles_per_state_21, by = "UF") %>%
mutate(percentage = vehicles_per_state_24::percent(total_electric_vehicles/total_vehicles, accuracy = 0.01)) %>%
filter(UF != "Sem Informação")
# Filter electric vehicles and creating a new variable for % of electric or hybrid vehicles
electric_vehicles_per_state_21 <- fleet_state_21 %>%
filter(grepl("^ELETRICO", `Combustível Veículo`)) %>%
group_by(UF) %>%
summarise(total_electric_vehicles = sum(Total)) %>%
left_join(vehicles_per_state_21, by = "UF") %>%
mutate(percentage = (total_electric_vehicles/total_vehicles, accuracy = 0.01)) %>%
# Filter electric vehicles and creating a new variable for % of electric or hybrid vehicles
electric_vehicles_per_state_21 <- fleet_state_21 %>%
filter(grepl("^ELETRICO", `Combustível Veículo`)) %>%
group_by(UF) %>%
summarise(total_electric_vehicles = sum(Total)) %>%
left_join(vehicles_per_state_21, by = "UF") %>%
mutate(percentage = (total_electric_vehicles/total_vehicles), accuracy = 0.01)) %>%
# Filter electric vehicles and creating a new variable for % of electric or hybrid vehicles
electric_vehicles_per_state_21 <- fleet_state_21 %>%
filter(grepl("^ELETRICO", `Combustível Veículo`)) %>%
group_by(UF) %>%
summarise(total_electric_vehicles = sum(Total)) %>%
left_join(vehicles_per_state_21, by = "UF") %>%
mutate(percentage = total_electric_vehicles/total_vehicles, accuracy = 0.01) %>%
filter(UF != "Sem Informação")
View(electric_vehicles_per_state_21)
View(yearly_results)
View(fleet_analysis_results)
yearly_results <- fleet_analysis_results %>%
group_by(year) %>%
summarize(total_e_vehicles = sum(total_electric_vehicles),
total_vehicles = sum(total_vehicles)) %>%
mutate(share_e_vehicles = total_e_vehicles/total_vehicles)
View(yearly_results)
