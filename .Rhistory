geom_line(aes(y = avg_price_e,     color = "Mean Price"),   size = 1)+
geom_line(aes(y = med_price_e,     color = "Median Price"), size = 1)+
geom_line(aes(y = min_price_e_def, color = "Lowest Price"), size = 1)+
scale_color_manual(
name = "Price Indicator",
values = c("Lowest Price" = "darkorange", "Mean Price" = "green3", "Median Price" = "blue2")
) +
scale_y_continuous(
labels = function(x) paste0("R$", format(x / 1000, big.mark = ".", decimal.mark = ","), " mil")) +
labs(
x = "Year",
y = "Average Deflated Yearly Price (BRL)",
title = "Monthly Evolution of Vehicle Prices for Electric Cars (2018–2022)",
subtitle = "Source: Peixoto, 2022",
caption = "\nData scrapped from the Fundação Instituto de Pesquisas Econômicas (FIPE)\ntable for average prices observed nationally in Brazil."
) +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1),
plot.background = element_rect(fill = "#ffffff", color = NA)
)
plot_trend_monthly_gasoline_prices_deflated <-
ggplot(fipe_price_gasoline_trend_m, aes(x = date)) +
geom_line(aes(y = avg_price_e,     color = "Mean Price"),   size = 1)+
geom_line(aes(y = med_price_e,     color = "Median Price"), size = 1)+
geom_line(aes(y = min_price_e_def, color = "Lowest Price"), size = 1)+
scale_color_manual(
name = "Price Indicator",
values = c("Lowest Price" = "darkorange", "Mean Price" = "green3", "Median Price" = "blue2")
) +
scale_y_continuous(
labels = function(x) paste0("R$", format(x / 1000, big.mark = ".", decimal.mark = ","), " mil")) +
labs(
x = "Year",
y = "Average Deflated Yearly Price (BRL)",
title = "Monthly Evolution of Vehicle Prices for Cars (Gasoline) (2018–2022)",
subtitle = "Source: Peixoto, 2022",
caption = "\nData scrapped from the Fundação Instituto de Pesquisas Econômicas (FIPE)\ntable for average prices observed nationally in Brazil."
) +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1),
plot.background = element_rect(fill = "#ffffff", color = NA)
)
plot_trend_monthly_hybrid_prices_deflated <-
ggplot(fipe_price_hybrid_trend_m, aes(x = date)) +
geom_line(aes(y = avg_price_e,     color = "Mean Price"),   size = 1)+
geom_line(aes(y = med_price_e,     color = "Median Price"), size = 1)+
geom_line(aes(y = min_price_e_def, color = "Lowest Price"), size = 1)+
scale_color_manual(
name = "Price Indicator",
values = c("Lowest Price" = "darkorange", "Mean Price" = "green3", "Median Price" = "blue2")
) +
scale_y_continuous(
labels = function(x) paste0("R$", format(x / 1000, big.mark = ".", decimal.mark = ","), " mil")) +
labs(
x = "Year",
y = "Average Deflated Yearly Price (BRL)",
title = "Monthly Evolution of Vehicle Prices for Cars (Hybrid/Ethanol) (2018–2022)",
subtitle = "Source: Peixoto, 2022",
caption = "\nData scrapped from the Fundação Instituto de Pesquisas Econômicas (FIPE)\ntable for average prices observed nationally in Brazil."
) +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1),
plot.background = element_rect(fill = "#ffffff", color = NA)
)
ggsave("./4_plots/plot_trend_monthly_ev_prices_deflated.png",
plot = plot_trend_monthly_ev_prices_deflated)
ggsave("./4_plots/plot_trend_monthly_gasoline_prices_deflated.png",
plot = plot_trend_monthly_gasoline_prices_deflated)
ggsave("./4_plots/plot_trend_monthly_hybrid_prices_deflated.png",
plot = plot_trend_monthly_hybrid_prices_deflated)
price_df <- read_csv("3_processed_data/fipe_price_monthly_trends_deflated.csv")
fleet_df
fleet_2013_2024_clean <- read_csv("./3_processed_data/fleet_2013_2024_id_clean.csv")
months <- fleet_2013_2024_clean %>%
arrange(date) %>%
distinct(date) %>%
mutate(months_nr = row_number())
fleet_df <- fleet_2013_2024_clean %>%
mutate(ev_pc        = electric / populacao,
ff_pc        = (gasoline+diesel)/populacao,
log_electric = log(electric),
log_ff       = log(gasoline+diesel),
log_pop      = log(populacao)) %>%
filter(log_electric >= 0) %>%
left_join(months, by="date")
fleet_df
View(fleet_df)
fleet_df_b <- fleet_df %>%
left_join(price_df, by = "date")
View(fleet_df_b)
fleet_df_b_city <- fleet_df %>%
left_join(price_df, by = "date")
fleet_df_b_uf <- fleet_df %>%
left_join(price_df, by = "date") %>%
group_by(sigla_uf, date, months_nr) %>%
summarize(diesel     = sum(diesel),
ethanol    = sum(ethanol),
gasoline   = sum(gasoline),
other      = sum(other),
electric   = sum(electric),
gas        = sum(gas),
population = max(populacao),
mean_gas   = mean(mean_price_gasoline),
mean_hyb   = mean(mean_price_hybrid),
mean_ev    = mean(mean_price_electric),
median_gas = mean(median_price_gasoline),
median_hyb = mean(median_price_hybrid),
median_ev  = mean(median_price_electric),
min_gas    = mean(min_price_gasoline),
min_hyb    = mean(min_price_hybrid),
min_ev     = mean(min_price_electric))
View(fleet_df_b_uf)
model3 <- lm(log_electric ~ log_pop * months_nr + mean_ev, data = fleet_df_b)
model3 <- lm(log_electric ~ log_pop * months_nr + mean_ev, data = fleet_df_b)
fleet_df_b_uf <- fleet_df %>%
left_join(price_df, by = "date") %>%
group_by(sigla_uf, date, months_nr) %>%
summarize(diesel     = sum(diesel),
ethanol    = sum(ethanol),
gasoline   = sum(gasoline),
other      = sum(other),
electric   = sum(electric),
gas        = sum(gas),
population = max(populacao),
mean_gas   = mean(mean_price_gasoline),
mean_hyb   = mean(mean_price_hybrid),
mean_ev    = mean(mean_price_electric),
median_gas = mean(median_price_gasoline),
median_hyb = mean(median_price_hybrid),
median_ev  = mean(median_price_electric),
min_gas    = mean(min_price_gasoline),
min_hyb    = mean(min_price_hybrid),
min_ev     = mean(min_price_electric))
model3 <- lm(log_electric ~ log_pop * months_nr + mean_ev, data = fleet_df_b_uf)
fleet_df_b_uf <- fleet_df %>%
left_join(price_df, by = "date") %>%
group_by(sigla_uf, date, months_nr) %>%
summarize(diesel     = sum(diesel),
ethanol    = sum(ethanol),
gasoline   = sum(gasoline),
other      = sum(other),
electric   = sum(electric),
gas        = sum(gas),
population = max(populacao),
mean_gas   = mean(mean_price_gasoline),
mean_hyb   = mean(mean_price_hybrid),
mean_ev    = mean(mean_price_electric),
median_gas = mean(median_price_gasoline),
median_hyb = mean(median_price_hybrid),
median_ev  = mean(median_price_electric),
min_gas    = mean(min_price_gasoline),
min_hyb    = mean(min_price_hybrid),
min_ev     = mean(min_price_electric)) %>%
mutate(ev_pc        = electric / populacao,
ff_pc        = (gasoline+diesel)/populacao,
log_electric = log(electric),
log_ff       = log(gasoline+diesel),
log_pop      = log(populacao))
fleet_df_b_uf <- fleet_df %>%
left_join(price_df, by = "date") %>%
group_by(sigla_uf, date, months_nr) %>%
summarize(diesel     = sum(diesel),
ethanol    = sum(ethanol),
gasoline   = sum(gasoline),
other      = sum(other),
electric   = sum(electric),
gas        = sum(gas),
population = sum(populacao),
mean_gas   = mean(mean_price_gasoline),
mean_hyb   = mean(mean_price_hybrid),
mean_ev    = mean(mean_price_electric),
median_gas = mean(median_price_gasoline),
median_hyb = mean(median_price_hybrid),
median_ev  = mean(median_price_electric),
min_gas    = mean(min_price_gasoline),
min_hyb    = mean(min_price_hybrid),
min_ev     = mean(min_price_electric)) %>%
mutate(ev_pc        = electric / population,
ff_pc        = (gasoline+diesel)/population,
log_electric = log(electric),
log_ff       = log(gasoline+diesel),
log_pop      = log(populacao))
fleet_df_b_uf <- fleet_df %>%
left_join(price_df, by = "date") %>%
group_by(sigla_uf, date, months_nr) %>%
summarize(diesel     = sum(diesel),
ethanol    = sum(ethanol),
gasoline   = sum(gasoline),
other      = sum(other),
electric   = sum(electric),
gas        = sum(gas),
population = sum(populacao),
mean_gas   = mean(mean_price_gasoline),
mean_hyb   = mean(mean_price_hybrid),
mean_ev    = mean(mean_price_electric),
median_gas = mean(median_price_gasoline),
median_hyb = mean(median_price_hybrid),
median_ev  = mean(median_price_electric),
min_gas    = mean(min_price_gasoline),
min_hyb    = mean(min_price_hybrid),
min_ev     = mean(min_price_electric)) %>%
mutate(ev_pc        = electric / population,
ff_pc        = (gasoline+diesel)/population,
log_electric = log(electric),
log_ff       = log(gasoline+diesel),
log_pop      = log(population))
View(fleet_df_b_uf)
model3 <- lm(log_electric ~ log_pop * months_nr + mean_ev, data = fleet_df_b_uf)
stargazer(model3, type = "text",
title="Linear Regression Results: Model 3", single.row=TRUE)
model3 <- lm(log_electric ~ log_pop * months_nr + mean_ev + mean_gas + mean_hyb, data = fleet_df_b_uf)
stargazer(model3, type = "text",
title="Linear Regression Results: Model 3", single.row=TRUE)
panel_data_b <- pdata.frame(fleet_df_b_uf, index = c("sigla_uf", "date"))
fe_model_2 <- plm(electric ~ log(populacao) + log(gasoline) + log(diesel) + log(ethanol) + mean_ev + mean_gas + mean_hyb + as.factor(months_nr),
data  = panel_data,
model = "within")
fe_model_2 <- plm(electric ~ log(populacao) + log(gasoline) + log(diesel) + log(ethanol) + mean_ev + mean_gas + mean_hyb + as.factor(months_nr),
data  = panel_data_b,
model = "within")
fe_model_2 <- plm(electric ~ log(population) + log(gasoline) + log(diesel) + log(ethanol) + mean_ev + mean_gas + mean_hyb + as.factor(months_nr),
data  = panel_data_b,
model = "within")
panel_data <- pdata.frame(fleet_df, index = c("id_municipio_nome", "date"))
fe_model_1 <- plm(electric ~ log(populacao) + as.factor(months_nr),
data  = panel_data,
model = "within")
fe_model_2 <- plm(electric ~ log(populacao) + log(gasoline) + log(diesel) + log(ethanol) + as.factor(months_nr),
data  = panel_data,
model = "within")
panel_data_b <- pdata.frame(fleet_df_b_uf, index = c("sigla_uf", "date"))
fe_model_3 <- plm(electric ~ log(population) + log(gasoline) + log(diesel) + log(ethanol) + mean_ev + mean_gas + mean_hyb + as.factor(months_nr),
data  = panel_data_b,
model = "within")
stargazer(fe_model_1, fe_model_2, fe_model_3, type = "text")
stargazer(fe_model_1, fe_model_2, fe_model_3, type = "html",
title="Fixed-Effects Linear Regression Results: Panel Data", single.row=TRUE,
out = "./5_analysis/1_regression_tables/fe_models_1&2.html")
library(car)
pacman::p_load(
# Core Data Manipulation and Tidying
dplyr,        # Data manipulation: filtering, summarizing, mutating, and more
tidyr,        # Data tidying and reshaping: pivoting, handling missing values
# Data Import
readr,        # Read flat files (CSV, TSV) into tibbles
readxl,       # Read Excel files (.xls, .xlsx) into data frames
basedosdados, # Access Brazilian public data via BigQuery
httr,         # Perform HTTP requests to interact with web APIs
# Data Visualization
ggplot2,      # Create customizable data visualizations using the grammar of graphics
scales,       # Format axes and legends (e.g., percentages, currencies)
viridis,      # Color palettes for data visualization (colorblind-friendly)
RColorBrewer, # Additional color palettes for plots
# String Manipulation
stringr,      # Simple and consistent string manipulation functions
stringi,      # Advanced string manipulation with Unicode support
# Date-Time Handling
lubridate,    # Simplify date and time parsing and manipulation
# Geographic and Spatial Data
geobr,        # Access Brazilian geographic data (e.g., shapefiles)
sf,           # Handle spatial/geographic data in R
# Reporting and Tables
gt,           # Tables for reporting results
stargazer,    # Generate regression tables in LaTeX/HTML/text formats
# Machine Learning and Metrics
caret,        # Comprehensive machine learning framework (classification/regression)
Metrics,      # Evaluate model performance (e.g., RMSE, MAE)
# Utilities
janitor,      # Clean messy data (e.g., column names) and create summary tables
archive,      # Extract files from compressed archives (.zip, .tar.gz)
# Specialized Packages
plm,          # Perform panel data analysis (fixed/random effects models)
deflateBr,    # Deflate nominal Brazilian Reais using price indexes
car
)
vif(fe_model_3)
fe_model_3 <- plm(electric ~ log(population) + log(gasoline) + log(diesel) + log(ethanol) + mean_ev + mean_gas + mean_hyb + as.factor(months_nr),
data  = panel_data_b,
model = "within",
singular.ok = TRUE)
stargazer(fe_model_1, fe_model_2, fe_model_3, type = "text")
X <- model.matrix(electric ~ ., fleet_df_b_uf)[, -1]
View(X)
Y <- log(fleet_df_b_uf$electric)
# Apply ridge regression to ames data
ridge <- glmnet(
x = X,
y = Y,
alpha = 0
)
pacman::p_load(
# Core Data Manipulation and Tidying
dplyr,        # Data manipulation: filtering, summarizing, mutating, and more
tidyr,        # Data tidying and reshaping: pivoting, handling missing values
# Data Import
readr,        # Read flat files (CSV, TSV) into tibbles
readxl,       # Read Excel files (.xls, .xlsx) into data frames
basedosdados, # Access Brazilian public data via BigQuery
httr,         # Perform HTTP requests to interact with web APIs
# Data Visualization
ggplot2,      # Create customizable data visualizations using the grammar of graphics
scales,       # Format axes and legends (e.g., percentages, currencies)
viridis,      # Color palettes for data visualization (colorblind-friendly)
RColorBrewer, # Additional color palettes for plots
# String Manipulation
stringr,      # Simple and consistent string manipulation functions
stringi,      # Advanced string manipulation with Unicode support
# Date-Time Handling
lubridate,    # Simplify date and time parsing and manipulation
# Geographic and Spatial Data
geobr,        # Access Brazilian geographic data (e.g., shapefiles)
sf,           # Handle spatial/geographic data in R
# Reporting and Tables
gt,           # Tables for reporting results
stargazer,    # Generate regression tables in LaTeX/HTML/text formats
# Machine Learning and Metrics
caret,        # Comprehensive machine learning framework (classification/regression)
Metrics,      # Evaluate model performance (e.g., RMSE, MAE)
# Utilities
janitor,      # Clean messy data (e.g., column names) and create summary tables
archive,      # Extract files from compressed archives (.zip, .tar.gz)
# Specialized Packages
plm,          # Perform panel data analysis (fixed/random effects models)
deflateBr,    # Deflate nominal Brazilian Reais using price indexes
car,
glmnet
)
# Apply ridge regression to ames data
ridge <- glmnet(
x = X,
y = Y,
alpha = 0
)
# Apply ridge regression to ames data
ridge <- glmnet(
x = X,
y = Y,
alpha = 0
)
Y <- log(fleet_df_b_uf$electric)
X <- model.matrix(electric ~ ., fleet_df_b_uf)[, -1]
Y <- log(fleet_df_b_uf$electric)
# Apply ridge regression to ames data
ridge <- glmnet(
x = X,
y = Y,
alpha = 0
)
X <- model.matrix(as.numeric(electric) ~ ., fleet_df_b_uf)[, -1]
X <- model.matrix(as.character(electric) ~ ., fleet_df_b_uf)[, -1]
fleet_df_b_city <- fleet_df %>%
left_join(price_df, by = "date")
fleet_df_b_uf <- fleet_df %>%
left_join(price_df, by = "date") %>%
group_by(sigla_uf, date, months_nr) %>%
summarize(diesel     = sum(diesel),
ethanol    = sum(ethanol),
gasoline   = sum(gasoline),
other      = sum(other),
electric   = sum(electric),
gas        = sum(gas),
population = sum(populacao))
X <- model.matrix(electric ~ ., fleet_df_b_uf)[, -1]
Y <- log(fleet_df_b_uf$electric)
# Apply ridge regression to ames data
ridge <- glmnet(
x = X,
y = Y,
alpha = 0
)
plot(ridge, xvar = "lambda")
ridge$lambda %>% head()
coef(ridge)[c("Latitude", "Overall_QualVery_Excellent"), 100]
coef(ridge)[c("electric", "Overall_QualVery_Excellent"), 100]
coef(ridge)[c("electric", "population"), 100]
coef(ridge)[c("electric", "population"), 100]
coef(ridge)[c("electric", "population"), 1]
# Apply ridge regression to ames data
ridge <- glmnet(
x = X,
y = Y,
alpha = 1
)
plot(ridge, xvar = "lambda")
lasso <- cv.glmnet(
x = X,
y = Y,
alpha = 1
)
par(mfrow = c(1, 2))
plot(ridge, main = "Ridge penalty\n\n")
plot(lasso, main = "Lasso penalty\n\n")
# Ridge model
ridge_min <- glmnet(
x = X,
y = Y,
alpha = 0
)
# Lasso model
lasso_min <- glmnet(
x = X,
y = Y,
alpha = 1
)
par(mfrow = c(1, 2))
# plot ridge model
plot(ridge_min, xvar = "lambda", main = "Ridge penalty\n\n")
abline(v = log(ridge$lambda.min), col = "red", lty = "dashed")
abline(v = log(ridge$lambda.1se), col = "blue", lty = "dashed")
# plot lasso model
plot(lasso_min, xvar = "lambda", main = "Lasso penalty\n\n")
abline(v = log(lasso$lambda.min), col = "red", lty = "dashed")
abline(v = log(lasso$lambda.1se), col = "blue", lty = "dashed")
# for reproducibility
set.seed(123)
# grid search across
cv_glmnet <- train(
x = X,
y = Y,
method = "glmnet",
preProc = c("zv", "center", "scale"),
trControl = trainControl(method = "cv", number = 10),
tuneLength = 10
)
# model with lowest RMSE
cv_glmnet$bestTune
cv_glmnet$results %>%
filter(alpha == cv_glmnet$bestTune$alpha, lambda == cv_glmnet$bestTune$lambda)
# predict number of electric vehicles on training data
pred <- predict(cv_glmnet, X)
# compute RMSE of transformed predicted
RMSE(exp(pred), exp(Y))
# compute RMSE of transformed predicted
RMSE(exp(pred), exp(Y))
pred
# compute RMSE of transformed predicted
?RMSE(exp(pred), exp(Y))
?RMSE
# Create a sequence of future dates
future_dates <- seq(from = max(fleet_df_b_uf$date), by = "month", length.out = 120)
# Create a data frame for future predictions
future_df <- data.frame(
date = future_dates,
sigla_uf = rep(unique(fleet_df_b_uf$sigla_uf), each = 120 / length(unique(fleet_df_b_uf$sigla_uf)))
)
# Create a sequence of future dates
future_dates <- seq(from = max(fleet_df_b_uf$date), by = "month", length.out = 108)
# Create a data frame for future predictions
future_df <- data.frame(
date = future_dates,
sigla_uf = rep(unique(fleet_df_b_uf$sigla_uf), each = 120 / length(unique(fleet_df_b_uf$sigla_uf)))
)
# Add other necessary columns (you may need to adjust these based on your specific data)
future_df$months_nr <- as.numeric(future_df$date - min(future_df$date)) + max(fleet_df_b_uf$months_nr)
future_df$population <- predict(lm(population ~ date, data = fleet_df_b_uf), newdata = future_df)
# Generate predictions
future_X <- model.matrix(~ . - electric, data = future_df)[, -1]
future_df
# Generate predictions
future_X <- model.matrix(~ . -electric, data = future_df)[, -1]
# Step 1: Extend the time series
# Assuming your current data ends in December 2024
future_dates <- seq.Date(from = as.Date("2025-01-01"), to = as.Date("2034-12-01"), by = "month")
# Create a new dataframe for future predictions
future_df <- data.frame(
date = future_dates,
months_nr = month(future_dates), # Extract month number
sigla_uf = unique(fleet_df_b_uf$sigla_uf) # Replicate states
) %>%
tidyr::expand(date, sigla_uf) %>% # Get all combinations of dates and states
mutate(
# Add any known or assumed features for future dates
population = NA, # Replace with projected population if available
mean_gas = NA,   # Replace with projected fuel prices if available
mean_hyb = NA,
mean_ev = NA,
median_gas = NA,
median_hyb = NA,
median_ev = NA,
min_gas = NA,
min_hyb = NA,
min_ev = NA
)
# Step 1: Extend the time series
# Assuming your current data ends in December 2024
future_dates <- seq.Date(from = as.Date("2023-01-01"), to = as.Date("2033-12-01"), by = "month")
# Create a new dataframe for future predictions
future_df <- data.frame(
date = future_dates,
months_nr = month(future_dates), # Extract month number
sigla_uf = unique(fleet_df_b_uf$sigla_uf) # Replicate states
) %>%
tidyr::expand(date, sigla_uf) %>% # Get all combinations of dates and states
mutate(
# Add any known or assumed features for future dates
population = NA, # Replace with projected population if available
mean_gas = NA,   # Replace with projected fuel prices if available
mean_hyb = NA,
mean_ev = NA,
median_gas = NA,
median_hyb = NA,
median_ev = NA,
min_gas = NA,
min_hyb = NA,
min_ev = NA
)
